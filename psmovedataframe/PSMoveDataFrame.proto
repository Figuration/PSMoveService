//
// PSMoveDataFrame.proto: protobuf definition file for the protocol
//
// Brendan Walker (brendan@millerwalker.net)
//
syntax = "proto3";
package PSMoveDataFrame;

// Reliable (TCP) requests that can issued to the PSMove Service
message Request {
    // Unique id for this request. 
    // Used to keep track of which reponse is associated with which request
    // when multiple requests are in-flight.
    int32 request_id = 1;

    // The request type determines which of the request structures is actually used
    enum RequestType {
        GET_ACTIVE_PSMOVE_COUNT= 0;
        START_PSMOVE_DATA_STREAM = 1;
        STOP_PSMOVE_DATA_STREAM = 2;
        SET_RUMBLE = 3;
        CYCLE_TRACKING_COLOR = 4;
        RESET_POSE = 5;
    }
    RequestType type = 2;

    // No parameters for GET_ACTIVE_PSMOVE_COUNT

    // Parameters for START_PSMOVE_DATA_STREAM
    // NOTE: ControllerDataFrame packets will start streaming to client upon receiving this request
    message RequestStartPSMoveDataStream {
        int32 psmove_id = 1;
    }
    RequestStartPSMoveDataStream request_start_psmove_data_stream = 21;

    // Parameters for STOP_PSMOVE_DATA_STREAM
    // NOTE: ControllerDataFrame packets will stop streaming to client upon receiving this request
    message RequestStopPSMoveDataStream {
        int32 psmove_id = 1;
    }
    RequestStopPSMoveDataStream request_stop_psmove_data_stream = 22;

    // Parameters for SET_RUMBLE
    message RequestSetRumble {
        int32 psmove_id = 1;
        int32 rumble = 2; // [0,255]
    }
    RequestSetRumble request_rumble = 23;

    // Parameters for CYCLE_TRACKING_COLOR
    message RequestCycleTrackingColor {
        int32 psmove_id = 1;
    }
    RequestCycleTrackingColor cycle_tracking_color = 24;

    // Parameters for RESET_POSE
    message RequestResetPose {
        int32 psmove_id = 1;
    }
    RequestResetPose reset_pose = 25;   
}

// Reliable (TCP) responses to requests
message Response {
    // The response type
    enum ResponseType {
        GENERAL_RESULT= 0;
        ACTIVE_PSMOVE_COUNT= 1;
    }

    enum ResultCode {
        RESULT_OK= 0;
        RESULT_ERROR= 1;
        RESULT_CANCELED= 2;
    }

    ResponseType type = 1;
    int32 request_id = 2;
    ResultCode result_code = 3;
    
    // Parameters for ACTIVE_PSMOVE_COUNT
    message ResponseActivePSMoveCount {
        int32 count = 1;
    }
    ResponseActivePSMoveCount response_psmove_count = 21;    
}

// Unreliable (UDP) controller data packet format
message ControllerDataFrame
{
    // Monotonically increasing id.
    // Used to throw out old data if it arrives out of order.
    int32 sequence_num= 1;

    // Controller status flags
    bool IsConnected= 2;
    bool IsTrackingEnabled= 3;
    bool IsCurrentlyTracking= 4;

    // Tracking position in the space of the HMD tracking camera
    message Position {
        float x = 1;
        float y = 2;
        float z = 3;
    }
    Position position = 5;

    // Tracking orientation in the frame of the local magnetic field
    message Orientation{
        float x = 1;
        float y = 2;
        float z = 3;
        float w = 4;
    }
    Orientation orientation = 6;

    // Button Index Bits
    enum ButtonType {
        TRIANGLE= 0;
        CIRCLE= 1;
        CROSS= 2;
        SQUARE= 3;
        SELECT= 4;
        START= 5;
        PS= 6;
        MOVE= 7;
        TRIGGER= 8;
    }
    
    // Raw bitmask of which buttons are currently down
    // Buttons bits are indexed using the ButtonType enum
    uint32 button_down_bitmask = 7;

    // Trigger analog value [0,255]
    int32 trigger_value = 8;
}

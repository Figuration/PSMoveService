// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PSMoveDataFrame.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "PSMoveDataFrame.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace PSMoveDataFrame {

namespace {

const ::google::protobuf::Descriptor* Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* Request_RequestAcquirePSMove_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Request_RequestAcquirePSMove_reflection_ = NULL;
const ::google::protobuf::Descriptor* Request_RequestReleasePSMove_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Request_RequestReleasePSMove_reflection_ = NULL;
const ::google::protobuf::Descriptor* Request_RequestSetRumble_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Request_RequestSetRumble_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Request_RequestType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Response_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Response_reflection_ = NULL;
const ::google::protobuf::Descriptor* Response_ResponseGeneral_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Response_ResponseGeneral_reflection_ = NULL;
const ::google::protobuf::Descriptor* Response_ResponseActivePSMoveCount_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Response_ResponseActivePSMoveCount_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Response_ResponseType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* Response_ResultCode_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ControllerDataFrame_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ControllerDataFrame_reflection_ = NULL;
const ::google::protobuf::Descriptor* ControllerDataFrame_Position_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ControllerDataFrame_Position_reflection_ = NULL;
const ::google::protobuf::Descriptor* ControllerDataFrame_Orientation_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ControllerDataFrame_Orientation_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_PSMoveDataFrame_2eproto() {
  protobuf_AddDesc_PSMoveDataFrame_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "PSMoveDataFrame.proto");
  GOOGLE_CHECK(file != NULL);
  Request_descriptor_ = file->message_type(0);
  static const int Request_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, request_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, request_acquire_psmove_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, request_release_psmove_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, request_rumble_),
  };
  Request_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Request_descriptor_,
      Request::default_instance_,
      Request_offsets_,
      -1,
      -1,
      -1,
      sizeof(Request),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, _is_default_instance_));
  Request_RequestAcquirePSMove_descriptor_ = Request_descriptor_->nested_type(0);
  static const int Request_RequestAcquirePSMove_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_RequestAcquirePSMove, psmove_id_),
  };
  Request_RequestAcquirePSMove_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Request_RequestAcquirePSMove_descriptor_,
      Request_RequestAcquirePSMove::default_instance_,
      Request_RequestAcquirePSMove_offsets_,
      -1,
      -1,
      -1,
      sizeof(Request_RequestAcquirePSMove),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_RequestAcquirePSMove, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_RequestAcquirePSMove, _is_default_instance_));
  Request_RequestReleasePSMove_descriptor_ = Request_descriptor_->nested_type(1);
  static const int Request_RequestReleasePSMove_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_RequestReleasePSMove, psmove_id_),
  };
  Request_RequestReleasePSMove_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Request_RequestReleasePSMove_descriptor_,
      Request_RequestReleasePSMove::default_instance_,
      Request_RequestReleasePSMove_offsets_,
      -1,
      -1,
      -1,
      sizeof(Request_RequestReleasePSMove),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_RequestReleasePSMove, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_RequestReleasePSMove, _is_default_instance_));
  Request_RequestSetRumble_descriptor_ = Request_descriptor_->nested_type(2);
  static const int Request_RequestSetRumble_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_RequestSetRumble, psmove_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_RequestSetRumble, rumble_),
  };
  Request_RequestSetRumble_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Request_RequestSetRumble_descriptor_,
      Request_RequestSetRumble::default_instance_,
      Request_RequestSetRumble_offsets_,
      -1,
      -1,
      -1,
      sizeof(Request_RequestSetRumble),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_RequestSetRumble, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_RequestSetRumble, _is_default_instance_));
  Request_RequestType_descriptor_ = Request_descriptor_->enum_type(0);
  Response_descriptor_ = file->message_type(1);
  static const int Response_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, request_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, response_general_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, response_psmove_count_),
  };
  Response_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Response_descriptor_,
      Response::default_instance_,
      Response_offsets_,
      -1,
      -1,
      -1,
      sizeof(Response),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, _is_default_instance_));
  Response_ResponseGeneral_descriptor_ = Response_descriptor_->nested_type(0);
  static const int Response_ResponseGeneral_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response_ResponseGeneral, code_),
  };
  Response_ResponseGeneral_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Response_ResponseGeneral_descriptor_,
      Response_ResponseGeneral::default_instance_,
      Response_ResponseGeneral_offsets_,
      -1,
      -1,
      -1,
      sizeof(Response_ResponseGeneral),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response_ResponseGeneral, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response_ResponseGeneral, _is_default_instance_));
  Response_ResponseActivePSMoveCount_descriptor_ = Response_descriptor_->nested_type(1);
  static const int Response_ResponseActivePSMoveCount_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response_ResponseActivePSMoveCount, count_),
  };
  Response_ResponseActivePSMoveCount_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Response_ResponseActivePSMoveCount_descriptor_,
      Response_ResponseActivePSMoveCount::default_instance_,
      Response_ResponseActivePSMoveCount_offsets_,
      -1,
      -1,
      -1,
      sizeof(Response_ResponseActivePSMoveCount),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response_ResponseActivePSMoveCount, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response_ResponseActivePSMoveCount, _is_default_instance_));
  Response_ResponseType_descriptor_ = Response_descriptor_->enum_type(0);
  Response_ResultCode_descriptor_ = Response_descriptor_->enum_type(1);
  ControllerDataFrame_descriptor_ = file->message_type(2);
  static const int ControllerDataFrame_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControllerDataFrame, sequence_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControllerDataFrame, isconnected_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControllerDataFrame, istrackingenabled_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControllerDataFrame, iscurrentlytracking_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControllerDataFrame, position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControllerDataFrame, orientation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControllerDataFrame, button_down_bitmask_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControllerDataFrame, trigger_value_),
  };
  ControllerDataFrame_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ControllerDataFrame_descriptor_,
      ControllerDataFrame::default_instance_,
      ControllerDataFrame_offsets_,
      -1,
      -1,
      -1,
      sizeof(ControllerDataFrame),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControllerDataFrame, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControllerDataFrame, _is_default_instance_));
  ControllerDataFrame_Position_descriptor_ = ControllerDataFrame_descriptor_->nested_type(0);
  static const int ControllerDataFrame_Position_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControllerDataFrame_Position, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControllerDataFrame_Position, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControllerDataFrame_Position, z_),
  };
  ControllerDataFrame_Position_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ControllerDataFrame_Position_descriptor_,
      ControllerDataFrame_Position::default_instance_,
      ControllerDataFrame_Position_offsets_,
      -1,
      -1,
      -1,
      sizeof(ControllerDataFrame_Position),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControllerDataFrame_Position, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControllerDataFrame_Position, _is_default_instance_));
  ControllerDataFrame_Orientation_descriptor_ = ControllerDataFrame_descriptor_->nested_type(1);
  static const int ControllerDataFrame_Orientation_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControllerDataFrame_Orientation, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControllerDataFrame_Orientation, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControllerDataFrame_Orientation, z_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControllerDataFrame_Orientation, w_),
  };
  ControllerDataFrame_Orientation_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ControllerDataFrame_Orientation_descriptor_,
      ControllerDataFrame_Orientation::default_instance_,
      ControllerDataFrame_Orientation_offsets_,
      -1,
      -1,
      -1,
      sizeof(ControllerDataFrame_Orientation),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControllerDataFrame_Orientation, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControllerDataFrame_Orientation, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_PSMoveDataFrame_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Request_descriptor_, &Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Request_RequestAcquirePSMove_descriptor_, &Request_RequestAcquirePSMove::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Request_RequestReleasePSMove_descriptor_, &Request_RequestReleasePSMove::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Request_RequestSetRumble_descriptor_, &Request_RequestSetRumble::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Response_descriptor_, &Response::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Response_ResponseGeneral_descriptor_, &Response_ResponseGeneral::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Response_ResponseActivePSMoveCount_descriptor_, &Response_ResponseActivePSMoveCount::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ControllerDataFrame_descriptor_, &ControllerDataFrame::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ControllerDataFrame_Position_descriptor_, &ControllerDataFrame_Position::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ControllerDataFrame_Orientation_descriptor_, &ControllerDataFrame_Orientation::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_PSMoveDataFrame_2eproto() {
  delete Request::default_instance_;
  delete Request_reflection_;
  delete Request_RequestAcquirePSMove::default_instance_;
  delete Request_RequestAcquirePSMove_reflection_;
  delete Request_RequestReleasePSMove::default_instance_;
  delete Request_RequestReleasePSMove_reflection_;
  delete Request_RequestSetRumble::default_instance_;
  delete Request_RequestSetRumble_reflection_;
  delete Response::default_instance_;
  delete Response_reflection_;
  delete Response_ResponseGeneral::default_instance_;
  delete Response_ResponseGeneral_reflection_;
  delete Response_ResponseActivePSMoveCount::default_instance_;
  delete Response_ResponseActivePSMoveCount_reflection_;
  delete ControllerDataFrame::default_instance_;
  delete ControllerDataFrame_reflection_;
  delete ControllerDataFrame_Position::default_instance_;
  delete ControllerDataFrame_Position_reflection_;
  delete ControllerDataFrame_Orientation::default_instance_;
  delete ControllerDataFrame_Orientation_reflection_;
}

void protobuf_AddDesc_PSMoveDataFrame_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\025PSMoveDataFrame.proto\022\017PSMoveDataFrame"
    "\"\316\004\n\007Request\022\022\n\nrequest_id\030\001 \001(\005\0222\n\004type"
    "\030\002 \001(\0162$.PSMoveDataFrame.Request.Request"
    "Type\022M\n\026request_acquire_psmove\030\025 \001(\0132-.P"
    "SMoveDataFrame.Request.RequestAcquirePSM"
    "ove\022M\n\026request_release_psmove\030\026 \001(\0132-.PS"
    "MoveDataFrame.Request.RequestReleasePSMo"
    "ve\022A\n\016request_rumble\030\027 \001(\0132).PSMoveDataF"
    "rame.Request.RequestSetRumble\032)\n\024Request"
    "AcquirePSMove\022\021\n\tpsmove_id\030\001 \001(\005\032)\n\024Requ"
    "estReleasePSMove\022\021\n\tpsmove_id\030\001 \001(\005\0325\n\020R"
    "equestSetRumble\022\021\n\tpsmove_id\030\001 \001(\005\022\016\n\006ru"
    "mble\030\002 \001(\005\"\214\001\n\013RequestType\022\033\n\027GET_ACTIVE"
    "_PSMOVE_COUNT\020\000\022\022\n\016ACQUIRE_PSMOVE\020\001\022\022\n\016R"
    "ELEASE_PSMOVE\020\002\022\016\n\nSET_RUMBLE\020\003\022\030\n\024CYCLE"
    "_TRACKING_COLOR\020\004\022\016\n\nRESET_POSE\020\005\"\314\003\n\010Re"
    "sponse\0224\n\004type\030\001 \001(\0162&.PSMoveDataFrame.R"
    "esponse.ResponseType\022\022\n\nrequest_id\030\002 \001(\005"
    "\022C\n\020response_general\030\025 \001(\0132).PSMoveDataF"
    "rame.Response.ResponseGeneral\022R\n\025respons"
    "e_psmove_count\030\026 \001(\01323.PSMoveDataFrame.R"
    "esponse.ResponseActivePSMoveCount\032E\n\017Res"
    "ponseGeneral\0222\n\004code\030\001 \001(\0162$.PSMoveDataF"
    "rame.Response.ResultCode\032*\n\031ResponseActi"
    "vePSMoveCount\022\r\n\005count\030\001 \001(\005\";\n\014Response"
    "Type\022\022\n\016GENERAL_RESULT\020\000\022\027\n\023ACTIVE_PSMOV"
    "E_COUNT\020\001\"-\n\nResultCode\022\r\n\tRESULT_OK\020\000\022\020"
    "\n\014RESULT_ERROR\020\001\"\234\003\n\023ControllerDataFrame"
    "\022\024\n\014sequence_num\030\001 \001(\005\022\023\n\013IsConnected\030\002 "
    "\001(\010\022\031\n\021IsTrackingEnabled\030\003 \001(\010\022\033\n\023IsCurr"
    "entlyTracking\030\004 \001(\010\022\?\n\010position\030\005 \001(\0132-."
    "PSMoveDataFrame.ControllerDataFrame.Posi"
    "tion\022E\n\013orientation\030\006 \001(\01320.PSMoveDataFr"
    "ame.ControllerDataFrame.Orientation\022\033\n\023b"
    "utton_down_bitmask\030\007 \001(\r\022\025\n\rtrigger_valu"
    "e\030\010 \001(\005\032+\n\010Position\022\t\n\001x\030\001 \001(\002\022\t\n\001y\030\002 \001("
    "\002\022\t\n\001z\030\003 \001(\002\0329\n\013Orientation\022\t\n\001x\030\001 \001(\002\022\t"
    "\n\001y\030\002 \001(\002\022\t\n\001z\030\003 \001(\002\022\t\n\001w\030\004 \001(\002b\006proto3", 1519);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "PSMoveDataFrame.proto", &protobuf_RegisterTypes);
  Request::default_instance_ = new Request();
  Request_RequestAcquirePSMove::default_instance_ = new Request_RequestAcquirePSMove();
  Request_RequestReleasePSMove::default_instance_ = new Request_RequestReleasePSMove();
  Request_RequestSetRumble::default_instance_ = new Request_RequestSetRumble();
  Response::default_instance_ = new Response();
  Response_ResponseGeneral::default_instance_ = new Response_ResponseGeneral();
  Response_ResponseActivePSMoveCount::default_instance_ = new Response_ResponseActivePSMoveCount();
  ControllerDataFrame::default_instance_ = new ControllerDataFrame();
  ControllerDataFrame_Position::default_instance_ = new ControllerDataFrame_Position();
  ControllerDataFrame_Orientation::default_instance_ = new ControllerDataFrame_Orientation();
  Request::default_instance_->InitAsDefaultInstance();
  Request_RequestAcquirePSMove::default_instance_->InitAsDefaultInstance();
  Request_RequestReleasePSMove::default_instance_->InitAsDefaultInstance();
  Request_RequestSetRumble::default_instance_->InitAsDefaultInstance();
  Response::default_instance_->InitAsDefaultInstance();
  Response_ResponseGeneral::default_instance_->InitAsDefaultInstance();
  Response_ResponseActivePSMoveCount::default_instance_->InitAsDefaultInstance();
  ControllerDataFrame::default_instance_->InitAsDefaultInstance();
  ControllerDataFrame_Position::default_instance_->InitAsDefaultInstance();
  ControllerDataFrame_Orientation::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_PSMoveDataFrame_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_PSMoveDataFrame_2eproto {
  StaticDescriptorInitializer_PSMoveDataFrame_2eproto() {
    protobuf_AddDesc_PSMoveDataFrame_2eproto();
  }
} static_descriptor_initializer_PSMoveDataFrame_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

const ::google::protobuf::EnumDescriptor* Request_RequestType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Request_RequestType_descriptor_;
}
bool Request_RequestType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Request_RequestType Request::GET_ACTIVE_PSMOVE_COUNT;
const Request_RequestType Request::ACQUIRE_PSMOVE;
const Request_RequestType Request::RELEASE_PSMOVE;
const Request_RequestType Request::SET_RUMBLE;
const Request_RequestType Request::CYCLE_TRACKING_COLOR;
const Request_RequestType Request::RESET_POSE;
const Request_RequestType Request::RequestType_MIN;
const Request_RequestType Request::RequestType_MAX;
const int Request::RequestType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Request_RequestAcquirePSMove::kPsmoveIdFieldNumber;
#endif  // !_MSC_VER

Request_RequestAcquirePSMove::Request_RequestAcquirePSMove()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PSMoveDataFrame.Request.RequestAcquirePSMove)
}

void Request_RequestAcquirePSMove::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Request_RequestAcquirePSMove::Request_RequestAcquirePSMove(const Request_RequestAcquirePSMove& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PSMoveDataFrame.Request.RequestAcquirePSMove)
}

void Request_RequestAcquirePSMove::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  psmove_id_ = 0;
}

Request_RequestAcquirePSMove::~Request_RequestAcquirePSMove() {
  // @@protoc_insertion_point(destructor:PSMoveDataFrame.Request.RequestAcquirePSMove)
  SharedDtor();
}

void Request_RequestAcquirePSMove::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Request_RequestAcquirePSMove::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Request_RequestAcquirePSMove::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Request_RequestAcquirePSMove_descriptor_;
}

const Request_RequestAcquirePSMove& Request_RequestAcquirePSMove::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PSMoveDataFrame_2eproto();
  return *default_instance_;
}

Request_RequestAcquirePSMove* Request_RequestAcquirePSMove::default_instance_ = NULL;

Request_RequestAcquirePSMove* Request_RequestAcquirePSMove::New(::google::protobuf::Arena* arena) const {
  Request_RequestAcquirePSMove* n = new Request_RequestAcquirePSMove;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Request_RequestAcquirePSMove::Clear() {
  psmove_id_ = 0;
}

bool Request_RequestAcquirePSMove::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PSMoveDataFrame.Request.RequestAcquirePSMove)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 psmove_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &psmove_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PSMoveDataFrame.Request.RequestAcquirePSMove)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PSMoveDataFrame.Request.RequestAcquirePSMove)
  return false;
#undef DO_
}

void Request_RequestAcquirePSMove::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PSMoveDataFrame.Request.RequestAcquirePSMove)
  // optional int32 psmove_id = 1;
  if (this->psmove_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->psmove_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:PSMoveDataFrame.Request.RequestAcquirePSMove)
}

::google::protobuf::uint8* Request_RequestAcquirePSMove::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PSMoveDataFrame.Request.RequestAcquirePSMove)
  // optional int32 psmove_id = 1;
  if (this->psmove_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->psmove_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:PSMoveDataFrame.Request.RequestAcquirePSMove)
  return target;
}

int Request_RequestAcquirePSMove::ByteSize() const {
  int total_size = 0;

  // optional int32 psmove_id = 1;
  if (this->psmove_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->psmove_id());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Request_RequestAcquirePSMove::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Request_RequestAcquirePSMove* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Request_RequestAcquirePSMove>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Request_RequestAcquirePSMove::MergeFrom(const Request_RequestAcquirePSMove& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.psmove_id() != 0) {
    set_psmove_id(from.psmove_id());
  }
}

void Request_RequestAcquirePSMove::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Request_RequestAcquirePSMove::CopyFrom(const Request_RequestAcquirePSMove& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Request_RequestAcquirePSMove::IsInitialized() const {

  return true;
}

void Request_RequestAcquirePSMove::Swap(Request_RequestAcquirePSMove* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Request_RequestAcquirePSMove::InternalSwap(Request_RequestAcquirePSMove* other) {
  std::swap(psmove_id_, other->psmove_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Request_RequestAcquirePSMove::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Request_RequestAcquirePSMove_descriptor_;
  metadata.reflection = Request_RequestAcquirePSMove_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Request_RequestReleasePSMove::kPsmoveIdFieldNumber;
#endif  // !_MSC_VER

Request_RequestReleasePSMove::Request_RequestReleasePSMove()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PSMoveDataFrame.Request.RequestReleasePSMove)
}

void Request_RequestReleasePSMove::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Request_RequestReleasePSMove::Request_RequestReleasePSMove(const Request_RequestReleasePSMove& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PSMoveDataFrame.Request.RequestReleasePSMove)
}

void Request_RequestReleasePSMove::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  psmove_id_ = 0;
}

Request_RequestReleasePSMove::~Request_RequestReleasePSMove() {
  // @@protoc_insertion_point(destructor:PSMoveDataFrame.Request.RequestReleasePSMove)
  SharedDtor();
}

void Request_RequestReleasePSMove::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Request_RequestReleasePSMove::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Request_RequestReleasePSMove::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Request_RequestReleasePSMove_descriptor_;
}

const Request_RequestReleasePSMove& Request_RequestReleasePSMove::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PSMoveDataFrame_2eproto();
  return *default_instance_;
}

Request_RequestReleasePSMove* Request_RequestReleasePSMove::default_instance_ = NULL;

Request_RequestReleasePSMove* Request_RequestReleasePSMove::New(::google::protobuf::Arena* arena) const {
  Request_RequestReleasePSMove* n = new Request_RequestReleasePSMove;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Request_RequestReleasePSMove::Clear() {
  psmove_id_ = 0;
}

bool Request_RequestReleasePSMove::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PSMoveDataFrame.Request.RequestReleasePSMove)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 psmove_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &psmove_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PSMoveDataFrame.Request.RequestReleasePSMove)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PSMoveDataFrame.Request.RequestReleasePSMove)
  return false;
#undef DO_
}

void Request_RequestReleasePSMove::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PSMoveDataFrame.Request.RequestReleasePSMove)
  // optional int32 psmove_id = 1;
  if (this->psmove_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->psmove_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:PSMoveDataFrame.Request.RequestReleasePSMove)
}

::google::protobuf::uint8* Request_RequestReleasePSMove::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PSMoveDataFrame.Request.RequestReleasePSMove)
  // optional int32 psmove_id = 1;
  if (this->psmove_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->psmove_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:PSMoveDataFrame.Request.RequestReleasePSMove)
  return target;
}

int Request_RequestReleasePSMove::ByteSize() const {
  int total_size = 0;

  // optional int32 psmove_id = 1;
  if (this->psmove_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->psmove_id());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Request_RequestReleasePSMove::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Request_RequestReleasePSMove* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Request_RequestReleasePSMove>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Request_RequestReleasePSMove::MergeFrom(const Request_RequestReleasePSMove& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.psmove_id() != 0) {
    set_psmove_id(from.psmove_id());
  }
}

void Request_RequestReleasePSMove::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Request_RequestReleasePSMove::CopyFrom(const Request_RequestReleasePSMove& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Request_RequestReleasePSMove::IsInitialized() const {

  return true;
}

void Request_RequestReleasePSMove::Swap(Request_RequestReleasePSMove* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Request_RequestReleasePSMove::InternalSwap(Request_RequestReleasePSMove* other) {
  std::swap(psmove_id_, other->psmove_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Request_RequestReleasePSMove::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Request_RequestReleasePSMove_descriptor_;
  metadata.reflection = Request_RequestReleasePSMove_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Request_RequestSetRumble::kPsmoveIdFieldNumber;
const int Request_RequestSetRumble::kRumbleFieldNumber;
#endif  // !_MSC_VER

Request_RequestSetRumble::Request_RequestSetRumble()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PSMoveDataFrame.Request.RequestSetRumble)
}

void Request_RequestSetRumble::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Request_RequestSetRumble::Request_RequestSetRumble(const Request_RequestSetRumble& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PSMoveDataFrame.Request.RequestSetRumble)
}

void Request_RequestSetRumble::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  psmove_id_ = 0;
  rumble_ = 0;
}

Request_RequestSetRumble::~Request_RequestSetRumble() {
  // @@protoc_insertion_point(destructor:PSMoveDataFrame.Request.RequestSetRumble)
  SharedDtor();
}

void Request_RequestSetRumble::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Request_RequestSetRumble::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Request_RequestSetRumble::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Request_RequestSetRumble_descriptor_;
}

const Request_RequestSetRumble& Request_RequestSetRumble::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PSMoveDataFrame_2eproto();
  return *default_instance_;
}

Request_RequestSetRumble* Request_RequestSetRumble::default_instance_ = NULL;

Request_RequestSetRumble* Request_RequestSetRumble::New(::google::protobuf::Arena* arena) const {
  Request_RequestSetRumble* n = new Request_RequestSetRumble;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Request_RequestSetRumble::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Request_RequestSetRumble*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(psmove_id_, rumble_);

#undef ZR_HELPER_
#undef ZR_

}

bool Request_RequestSetRumble::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PSMoveDataFrame.Request.RequestSetRumble)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 psmove_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &psmove_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_rumble;
        break;
      }

      // optional int32 rumble = 2;
      case 2: {
        if (tag == 16) {
         parse_rumble:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rumble_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PSMoveDataFrame.Request.RequestSetRumble)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PSMoveDataFrame.Request.RequestSetRumble)
  return false;
#undef DO_
}

void Request_RequestSetRumble::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PSMoveDataFrame.Request.RequestSetRumble)
  // optional int32 psmove_id = 1;
  if (this->psmove_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->psmove_id(), output);
  }

  // optional int32 rumble = 2;
  if (this->rumble() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->rumble(), output);
  }

  // @@protoc_insertion_point(serialize_end:PSMoveDataFrame.Request.RequestSetRumble)
}

::google::protobuf::uint8* Request_RequestSetRumble::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PSMoveDataFrame.Request.RequestSetRumble)
  // optional int32 psmove_id = 1;
  if (this->psmove_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->psmove_id(), target);
  }

  // optional int32 rumble = 2;
  if (this->rumble() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->rumble(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:PSMoveDataFrame.Request.RequestSetRumble)
  return target;
}

int Request_RequestSetRumble::ByteSize() const {
  int total_size = 0;

  // optional int32 psmove_id = 1;
  if (this->psmove_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->psmove_id());
  }

  // optional int32 rumble = 2;
  if (this->rumble() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->rumble());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Request_RequestSetRumble::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Request_RequestSetRumble* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Request_RequestSetRumble>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Request_RequestSetRumble::MergeFrom(const Request_RequestSetRumble& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.psmove_id() != 0) {
    set_psmove_id(from.psmove_id());
  }
  if (from.rumble() != 0) {
    set_rumble(from.rumble());
  }
}

void Request_RequestSetRumble::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Request_RequestSetRumble::CopyFrom(const Request_RequestSetRumble& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Request_RequestSetRumble::IsInitialized() const {

  return true;
}

void Request_RequestSetRumble::Swap(Request_RequestSetRumble* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Request_RequestSetRumble::InternalSwap(Request_RequestSetRumble* other) {
  std::swap(psmove_id_, other->psmove_id_);
  std::swap(rumble_, other->rumble_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Request_RequestSetRumble::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Request_RequestSetRumble_descriptor_;
  metadata.reflection = Request_RequestSetRumble_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Request::kRequestIdFieldNumber;
const int Request::kTypeFieldNumber;
const int Request::kRequestAcquirePsmoveFieldNumber;
const int Request::kRequestReleasePsmoveFieldNumber;
const int Request::kRequestRumbleFieldNumber;
#endif  // !_MSC_VER

Request::Request()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PSMoveDataFrame.Request)
}

void Request::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  request_acquire_psmove_ = const_cast< ::PSMoveDataFrame::Request_RequestAcquirePSMove*>(&::PSMoveDataFrame::Request_RequestAcquirePSMove::default_instance());
  request_release_psmove_ = const_cast< ::PSMoveDataFrame::Request_RequestReleasePSMove*>(&::PSMoveDataFrame::Request_RequestReleasePSMove::default_instance());
  request_rumble_ = const_cast< ::PSMoveDataFrame::Request_RequestSetRumble*>(&::PSMoveDataFrame::Request_RequestSetRumble::default_instance());
}

Request::Request(const Request& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PSMoveDataFrame.Request)
}

void Request::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  request_id_ = 0;
  type_ = 0;
  request_acquire_psmove_ = NULL;
  request_release_psmove_ = NULL;
  request_rumble_ = NULL;
}

Request::~Request() {
  // @@protoc_insertion_point(destructor:PSMoveDataFrame.Request)
  SharedDtor();
}

void Request::SharedDtor() {
  if (this != default_instance_) {
    delete request_acquire_psmove_;
    delete request_release_psmove_;
    delete request_rumble_;
  }
}

void Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Request_descriptor_;
}

const Request& Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PSMoveDataFrame_2eproto();
  return *default_instance_;
}

Request* Request::default_instance_ = NULL;

Request* Request::New(::google::protobuf::Arena* arena) const {
  Request* n = new Request;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Request::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Request*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(request_id_, type_);
  if (GetArenaNoVirtual() == NULL && request_acquire_psmove_ != NULL) delete request_acquire_psmove_;
  request_acquire_psmove_ = NULL;
  if (GetArenaNoVirtual() == NULL && request_release_psmove_ != NULL) delete request_release_psmove_;
  request_release_psmove_ = NULL;
  if (GetArenaNoVirtual() == NULL && request_rumble_ != NULL) delete request_rumble_;
  request_rumble_ = NULL;

#undef ZR_HELPER_
#undef ZR_

}

bool Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PSMoveDataFrame.Request)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 request_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &request_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional .PSMoveDataFrame.Request.RequestType type = 2;
      case 2: {
        if (tag == 16) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::PSMoveDataFrame::Request_RequestType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(170)) goto parse_request_acquire_psmove;
        break;
      }

      // optional .PSMoveDataFrame.Request.RequestAcquirePSMove request_acquire_psmove = 21;
      case 21: {
        if (tag == 170) {
         parse_request_acquire_psmove:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_request_acquire_psmove()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(178)) goto parse_request_release_psmove;
        break;
      }

      // optional .PSMoveDataFrame.Request.RequestReleasePSMove request_release_psmove = 22;
      case 22: {
        if (tag == 178) {
         parse_request_release_psmove:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_request_release_psmove()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(186)) goto parse_request_rumble;
        break;
      }

      // optional .PSMoveDataFrame.Request.RequestSetRumble request_rumble = 23;
      case 23: {
        if (tag == 186) {
         parse_request_rumble:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_request_rumble()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PSMoveDataFrame.Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PSMoveDataFrame.Request)
  return false;
#undef DO_
}

void Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PSMoveDataFrame.Request)
  // optional int32 request_id = 1;
  if (this->request_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->request_id(), output);
  }

  // optional .PSMoveDataFrame.Request.RequestType type = 2;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // optional .PSMoveDataFrame.Request.RequestAcquirePSMove request_acquire_psmove = 21;
  if (this->has_request_acquire_psmove()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      21, *this->request_acquire_psmove_, output);
  }

  // optional .PSMoveDataFrame.Request.RequestReleasePSMove request_release_psmove = 22;
  if (this->has_request_release_psmove()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      22, *this->request_release_psmove_, output);
  }

  // optional .PSMoveDataFrame.Request.RequestSetRumble request_rumble = 23;
  if (this->has_request_rumble()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      23, *this->request_rumble_, output);
  }

  // @@protoc_insertion_point(serialize_end:PSMoveDataFrame.Request)
}

::google::protobuf::uint8* Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PSMoveDataFrame.Request)
  // optional int32 request_id = 1;
  if (this->request_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->request_id(), target);
  }

  // optional .PSMoveDataFrame.Request.RequestType type = 2;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // optional .PSMoveDataFrame.Request.RequestAcquirePSMove request_acquire_psmove = 21;
  if (this->has_request_acquire_psmove()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        21, *this->request_acquire_psmove_, target);
  }

  // optional .PSMoveDataFrame.Request.RequestReleasePSMove request_release_psmove = 22;
  if (this->has_request_release_psmove()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        22, *this->request_release_psmove_, target);
  }

  // optional .PSMoveDataFrame.Request.RequestSetRumble request_rumble = 23;
  if (this->has_request_rumble()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        23, *this->request_rumble_, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:PSMoveDataFrame.Request)
  return target;
}

int Request::ByteSize() const {
  int total_size = 0;

  // optional int32 request_id = 1;
  if (this->request_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->request_id());
  }

  // optional .PSMoveDataFrame.Request.RequestType type = 2;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  // optional .PSMoveDataFrame.Request.RequestAcquirePSMove request_acquire_psmove = 21;
  if (this->has_request_acquire_psmove()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->request_acquire_psmove_);
  }

  // optional .PSMoveDataFrame.Request.RequestReleasePSMove request_release_psmove = 22;
  if (this->has_request_release_psmove()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->request_release_psmove_);
  }

  // optional .PSMoveDataFrame.Request.RequestSetRumble request_rumble = 23;
  if (this->has_request_rumble()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->request_rumble_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Request::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Request* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Request>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Request::MergeFrom(const Request& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.request_id() != 0) {
    set_request_id(from.request_id());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.has_request_acquire_psmove()) {
    mutable_request_acquire_psmove()->::PSMoveDataFrame::Request_RequestAcquirePSMove::MergeFrom(from.request_acquire_psmove());
  }
  if (from.has_request_release_psmove()) {
    mutable_request_release_psmove()->::PSMoveDataFrame::Request_RequestReleasePSMove::MergeFrom(from.request_release_psmove());
  }
  if (from.has_request_rumble()) {
    mutable_request_rumble()->::PSMoveDataFrame::Request_RequestSetRumble::MergeFrom(from.request_rumble());
  }
}

void Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Request::CopyFrom(const Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Request::IsInitialized() const {

  return true;
}

void Request::Swap(Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Request::InternalSwap(Request* other) {
  std::swap(request_id_, other->request_id_);
  std::swap(type_, other->type_);
  std::swap(request_acquire_psmove_, other->request_acquire_psmove_);
  std::swap(request_release_psmove_, other->request_release_psmove_);
  std::swap(request_rumble_, other->request_rumble_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Request_descriptor_;
  metadata.reflection = Request_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Request_RequestAcquirePSMove

// optional int32 psmove_id = 1;
void Request_RequestAcquirePSMove::clear_psmove_id() {
  psmove_id_ = 0;
}
 ::google::protobuf::int32 Request_RequestAcquirePSMove::psmove_id() const {
  // @@protoc_insertion_point(field_get:PSMoveDataFrame.Request.RequestAcquirePSMove.psmove_id)
  return psmove_id_;
}
 void Request_RequestAcquirePSMove::set_psmove_id(::google::protobuf::int32 value) {
  
  psmove_id_ = value;
  // @@protoc_insertion_point(field_set:PSMoveDataFrame.Request.RequestAcquirePSMove.psmove_id)
}

// -------------------------------------------------------------------

// Request_RequestReleasePSMove

// optional int32 psmove_id = 1;
void Request_RequestReleasePSMove::clear_psmove_id() {
  psmove_id_ = 0;
}
 ::google::protobuf::int32 Request_RequestReleasePSMove::psmove_id() const {
  // @@protoc_insertion_point(field_get:PSMoveDataFrame.Request.RequestReleasePSMove.psmove_id)
  return psmove_id_;
}
 void Request_RequestReleasePSMove::set_psmove_id(::google::protobuf::int32 value) {
  
  psmove_id_ = value;
  // @@protoc_insertion_point(field_set:PSMoveDataFrame.Request.RequestReleasePSMove.psmove_id)
}

// -------------------------------------------------------------------

// Request_RequestSetRumble

// optional int32 psmove_id = 1;
void Request_RequestSetRumble::clear_psmove_id() {
  psmove_id_ = 0;
}
 ::google::protobuf::int32 Request_RequestSetRumble::psmove_id() const {
  // @@protoc_insertion_point(field_get:PSMoveDataFrame.Request.RequestSetRumble.psmove_id)
  return psmove_id_;
}
 void Request_RequestSetRumble::set_psmove_id(::google::protobuf::int32 value) {
  
  psmove_id_ = value;
  // @@protoc_insertion_point(field_set:PSMoveDataFrame.Request.RequestSetRumble.psmove_id)
}

// optional int32 rumble = 2;
void Request_RequestSetRumble::clear_rumble() {
  rumble_ = 0;
}
 ::google::protobuf::int32 Request_RequestSetRumble::rumble() const {
  // @@protoc_insertion_point(field_get:PSMoveDataFrame.Request.RequestSetRumble.rumble)
  return rumble_;
}
 void Request_RequestSetRumble::set_rumble(::google::protobuf::int32 value) {
  
  rumble_ = value;
  // @@protoc_insertion_point(field_set:PSMoveDataFrame.Request.RequestSetRumble.rumble)
}

// -------------------------------------------------------------------

// Request

// optional int32 request_id = 1;
void Request::clear_request_id() {
  request_id_ = 0;
}
 ::google::protobuf::int32 Request::request_id() const {
  // @@protoc_insertion_point(field_get:PSMoveDataFrame.Request.request_id)
  return request_id_;
}
 void Request::set_request_id(::google::protobuf::int32 value) {
  
  request_id_ = value;
  // @@protoc_insertion_point(field_set:PSMoveDataFrame.Request.request_id)
}

// optional .PSMoveDataFrame.Request.RequestType type = 2;
void Request::clear_type() {
  type_ = 0;
}
 ::PSMoveDataFrame::Request_RequestType Request::type() const {
  // @@protoc_insertion_point(field_get:PSMoveDataFrame.Request.type)
  return static_cast< ::PSMoveDataFrame::Request_RequestType >(type_);
}
 void Request::set_type(::PSMoveDataFrame::Request_RequestType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:PSMoveDataFrame.Request.type)
}

// optional .PSMoveDataFrame.Request.RequestAcquirePSMove request_acquire_psmove = 21;
bool Request::has_request_acquire_psmove() const {
  return !_is_default_instance_ && request_acquire_psmove_ != NULL;
}
void Request::clear_request_acquire_psmove() {
  if (GetArenaNoVirtual() == NULL && request_acquire_psmove_ != NULL) delete request_acquire_psmove_;
  request_acquire_psmove_ = NULL;
}
const ::PSMoveDataFrame::Request_RequestAcquirePSMove& Request::request_acquire_psmove() const {
  // @@protoc_insertion_point(field_get:PSMoveDataFrame.Request.request_acquire_psmove)
  return request_acquire_psmove_ != NULL ? *request_acquire_psmove_ : *default_instance_->request_acquire_psmove_;
}
::PSMoveDataFrame::Request_RequestAcquirePSMove* Request::mutable_request_acquire_psmove() {
  
  if (request_acquire_psmove_ == NULL) {
    request_acquire_psmove_ = new ::PSMoveDataFrame::Request_RequestAcquirePSMove;
  }
  // @@protoc_insertion_point(field_mutable:PSMoveDataFrame.Request.request_acquire_psmove)
  return request_acquire_psmove_;
}
::PSMoveDataFrame::Request_RequestAcquirePSMove* Request::release_request_acquire_psmove() {
  
  ::PSMoveDataFrame::Request_RequestAcquirePSMove* temp = request_acquire_psmove_;
  request_acquire_psmove_ = NULL;
  return temp;
}
void Request::set_allocated_request_acquire_psmove(::PSMoveDataFrame::Request_RequestAcquirePSMove* request_acquire_psmove) {
  delete request_acquire_psmove_;
  request_acquire_psmove_ = request_acquire_psmove;
  if (request_acquire_psmove) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:PSMoveDataFrame.Request.request_acquire_psmove)
}

// optional .PSMoveDataFrame.Request.RequestReleasePSMove request_release_psmove = 22;
bool Request::has_request_release_psmove() const {
  return !_is_default_instance_ && request_release_psmove_ != NULL;
}
void Request::clear_request_release_psmove() {
  if (GetArenaNoVirtual() == NULL && request_release_psmove_ != NULL) delete request_release_psmove_;
  request_release_psmove_ = NULL;
}
const ::PSMoveDataFrame::Request_RequestReleasePSMove& Request::request_release_psmove() const {
  // @@protoc_insertion_point(field_get:PSMoveDataFrame.Request.request_release_psmove)
  return request_release_psmove_ != NULL ? *request_release_psmove_ : *default_instance_->request_release_psmove_;
}
::PSMoveDataFrame::Request_RequestReleasePSMove* Request::mutable_request_release_psmove() {
  
  if (request_release_psmove_ == NULL) {
    request_release_psmove_ = new ::PSMoveDataFrame::Request_RequestReleasePSMove;
  }
  // @@protoc_insertion_point(field_mutable:PSMoveDataFrame.Request.request_release_psmove)
  return request_release_psmove_;
}
::PSMoveDataFrame::Request_RequestReleasePSMove* Request::release_request_release_psmove() {
  
  ::PSMoveDataFrame::Request_RequestReleasePSMove* temp = request_release_psmove_;
  request_release_psmove_ = NULL;
  return temp;
}
void Request::set_allocated_request_release_psmove(::PSMoveDataFrame::Request_RequestReleasePSMove* request_release_psmove) {
  delete request_release_psmove_;
  request_release_psmove_ = request_release_psmove;
  if (request_release_psmove) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:PSMoveDataFrame.Request.request_release_psmove)
}

// optional .PSMoveDataFrame.Request.RequestSetRumble request_rumble = 23;
bool Request::has_request_rumble() const {
  return !_is_default_instance_ && request_rumble_ != NULL;
}
void Request::clear_request_rumble() {
  if (GetArenaNoVirtual() == NULL && request_rumble_ != NULL) delete request_rumble_;
  request_rumble_ = NULL;
}
const ::PSMoveDataFrame::Request_RequestSetRumble& Request::request_rumble() const {
  // @@protoc_insertion_point(field_get:PSMoveDataFrame.Request.request_rumble)
  return request_rumble_ != NULL ? *request_rumble_ : *default_instance_->request_rumble_;
}
::PSMoveDataFrame::Request_RequestSetRumble* Request::mutable_request_rumble() {
  
  if (request_rumble_ == NULL) {
    request_rumble_ = new ::PSMoveDataFrame::Request_RequestSetRumble;
  }
  // @@protoc_insertion_point(field_mutable:PSMoveDataFrame.Request.request_rumble)
  return request_rumble_;
}
::PSMoveDataFrame::Request_RequestSetRumble* Request::release_request_rumble() {
  
  ::PSMoveDataFrame::Request_RequestSetRumble* temp = request_rumble_;
  request_rumble_ = NULL;
  return temp;
}
void Request::set_allocated_request_rumble(::PSMoveDataFrame::Request_RequestSetRumble* request_rumble) {
  delete request_rumble_;
  request_rumble_ = request_rumble;
  if (request_rumble) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:PSMoveDataFrame.Request.request_rumble)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* Response_ResponseType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Response_ResponseType_descriptor_;
}
bool Response_ResponseType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Response_ResponseType Response::GENERAL_RESULT;
const Response_ResponseType Response::ACTIVE_PSMOVE_COUNT;
const Response_ResponseType Response::ResponseType_MIN;
const Response_ResponseType Response::ResponseType_MAX;
const int Response::ResponseType_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* Response_ResultCode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Response_ResultCode_descriptor_;
}
bool Response_ResultCode_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Response_ResultCode Response::RESULT_OK;
const Response_ResultCode Response::RESULT_ERROR;
const Response_ResultCode Response::ResultCode_MIN;
const Response_ResultCode Response::ResultCode_MAX;
const int Response::ResultCode_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Response_ResponseGeneral::kCodeFieldNumber;
#endif  // !_MSC_VER

Response_ResponseGeneral::Response_ResponseGeneral()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PSMoveDataFrame.Response.ResponseGeneral)
}

void Response_ResponseGeneral::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Response_ResponseGeneral::Response_ResponseGeneral(const Response_ResponseGeneral& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PSMoveDataFrame.Response.ResponseGeneral)
}

void Response_ResponseGeneral::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  code_ = 0;
}

Response_ResponseGeneral::~Response_ResponseGeneral() {
  // @@protoc_insertion_point(destructor:PSMoveDataFrame.Response.ResponseGeneral)
  SharedDtor();
}

void Response_ResponseGeneral::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Response_ResponseGeneral::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Response_ResponseGeneral::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Response_ResponseGeneral_descriptor_;
}

const Response_ResponseGeneral& Response_ResponseGeneral::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PSMoveDataFrame_2eproto();
  return *default_instance_;
}

Response_ResponseGeneral* Response_ResponseGeneral::default_instance_ = NULL;

Response_ResponseGeneral* Response_ResponseGeneral::New(::google::protobuf::Arena* arena) const {
  Response_ResponseGeneral* n = new Response_ResponseGeneral;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Response_ResponseGeneral::Clear() {
  code_ = 0;
}

bool Response_ResponseGeneral::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PSMoveDataFrame.Response.ResponseGeneral)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .PSMoveDataFrame.Response.ResultCode code = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_code(static_cast< ::PSMoveDataFrame::Response_ResultCode >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PSMoveDataFrame.Response.ResponseGeneral)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PSMoveDataFrame.Response.ResponseGeneral)
  return false;
#undef DO_
}

void Response_ResponseGeneral::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PSMoveDataFrame.Response.ResponseGeneral)
  // optional .PSMoveDataFrame.Response.ResultCode code = 1;
  if (this->code() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->code(), output);
  }

  // @@protoc_insertion_point(serialize_end:PSMoveDataFrame.Response.ResponseGeneral)
}

::google::protobuf::uint8* Response_ResponseGeneral::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PSMoveDataFrame.Response.ResponseGeneral)
  // optional .PSMoveDataFrame.Response.ResultCode code = 1;
  if (this->code() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->code(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:PSMoveDataFrame.Response.ResponseGeneral)
  return target;
}

int Response_ResponseGeneral::ByteSize() const {
  int total_size = 0;

  // optional .PSMoveDataFrame.Response.ResultCode code = 1;
  if (this->code() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->code());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Response_ResponseGeneral::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Response_ResponseGeneral* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Response_ResponseGeneral>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Response_ResponseGeneral::MergeFrom(const Response_ResponseGeneral& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.code() != 0) {
    set_code(from.code());
  }
}

void Response_ResponseGeneral::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Response_ResponseGeneral::CopyFrom(const Response_ResponseGeneral& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Response_ResponseGeneral::IsInitialized() const {

  return true;
}

void Response_ResponseGeneral::Swap(Response_ResponseGeneral* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Response_ResponseGeneral::InternalSwap(Response_ResponseGeneral* other) {
  std::swap(code_, other->code_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Response_ResponseGeneral::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Response_ResponseGeneral_descriptor_;
  metadata.reflection = Response_ResponseGeneral_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Response_ResponseActivePSMoveCount::kCountFieldNumber;
#endif  // !_MSC_VER

Response_ResponseActivePSMoveCount::Response_ResponseActivePSMoveCount()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PSMoveDataFrame.Response.ResponseActivePSMoveCount)
}

void Response_ResponseActivePSMoveCount::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Response_ResponseActivePSMoveCount::Response_ResponseActivePSMoveCount(const Response_ResponseActivePSMoveCount& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PSMoveDataFrame.Response.ResponseActivePSMoveCount)
}

void Response_ResponseActivePSMoveCount::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  count_ = 0;
}

Response_ResponseActivePSMoveCount::~Response_ResponseActivePSMoveCount() {
  // @@protoc_insertion_point(destructor:PSMoveDataFrame.Response.ResponseActivePSMoveCount)
  SharedDtor();
}

void Response_ResponseActivePSMoveCount::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Response_ResponseActivePSMoveCount::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Response_ResponseActivePSMoveCount::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Response_ResponseActivePSMoveCount_descriptor_;
}

const Response_ResponseActivePSMoveCount& Response_ResponseActivePSMoveCount::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PSMoveDataFrame_2eproto();
  return *default_instance_;
}

Response_ResponseActivePSMoveCount* Response_ResponseActivePSMoveCount::default_instance_ = NULL;

Response_ResponseActivePSMoveCount* Response_ResponseActivePSMoveCount::New(::google::protobuf::Arena* arena) const {
  Response_ResponseActivePSMoveCount* n = new Response_ResponseActivePSMoveCount;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Response_ResponseActivePSMoveCount::Clear() {
  count_ = 0;
}

bool Response_ResponseActivePSMoveCount::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PSMoveDataFrame.Response.ResponseActivePSMoveCount)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 count = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PSMoveDataFrame.Response.ResponseActivePSMoveCount)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PSMoveDataFrame.Response.ResponseActivePSMoveCount)
  return false;
#undef DO_
}

void Response_ResponseActivePSMoveCount::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PSMoveDataFrame.Response.ResponseActivePSMoveCount)
  // optional int32 count = 1;
  if (this->count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->count(), output);
  }

  // @@protoc_insertion_point(serialize_end:PSMoveDataFrame.Response.ResponseActivePSMoveCount)
}

::google::protobuf::uint8* Response_ResponseActivePSMoveCount::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PSMoveDataFrame.Response.ResponseActivePSMoveCount)
  // optional int32 count = 1;
  if (this->count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->count(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:PSMoveDataFrame.Response.ResponseActivePSMoveCount)
  return target;
}

int Response_ResponseActivePSMoveCount::ByteSize() const {
  int total_size = 0;

  // optional int32 count = 1;
  if (this->count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->count());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Response_ResponseActivePSMoveCount::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Response_ResponseActivePSMoveCount* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Response_ResponseActivePSMoveCount>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Response_ResponseActivePSMoveCount::MergeFrom(const Response_ResponseActivePSMoveCount& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.count() != 0) {
    set_count(from.count());
  }
}

void Response_ResponseActivePSMoveCount::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Response_ResponseActivePSMoveCount::CopyFrom(const Response_ResponseActivePSMoveCount& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Response_ResponseActivePSMoveCount::IsInitialized() const {

  return true;
}

void Response_ResponseActivePSMoveCount::Swap(Response_ResponseActivePSMoveCount* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Response_ResponseActivePSMoveCount::InternalSwap(Response_ResponseActivePSMoveCount* other) {
  std::swap(count_, other->count_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Response_ResponseActivePSMoveCount::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Response_ResponseActivePSMoveCount_descriptor_;
  metadata.reflection = Response_ResponseActivePSMoveCount_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Response::kTypeFieldNumber;
const int Response::kRequestIdFieldNumber;
const int Response::kResponseGeneralFieldNumber;
const int Response::kResponsePsmoveCountFieldNumber;
#endif  // !_MSC_VER

Response::Response()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PSMoveDataFrame.Response)
}

void Response::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  response_general_ = const_cast< ::PSMoveDataFrame::Response_ResponseGeneral*>(&::PSMoveDataFrame::Response_ResponseGeneral::default_instance());
  response_psmove_count_ = const_cast< ::PSMoveDataFrame::Response_ResponseActivePSMoveCount*>(&::PSMoveDataFrame::Response_ResponseActivePSMoveCount::default_instance());
}

Response::Response(const Response& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PSMoveDataFrame.Response)
}

void Response::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  type_ = 0;
  request_id_ = 0;
  response_general_ = NULL;
  response_psmove_count_ = NULL;
}

Response::~Response() {
  // @@protoc_insertion_point(destructor:PSMoveDataFrame.Response)
  SharedDtor();
}

void Response::SharedDtor() {
  if (this != default_instance_) {
    delete response_general_;
    delete response_psmove_count_;
  }
}

void Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Response::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Response_descriptor_;
}

const Response& Response::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PSMoveDataFrame_2eproto();
  return *default_instance_;
}

Response* Response::default_instance_ = NULL;

Response* Response::New(::google::protobuf::Arena* arena) const {
  Response* n = new Response;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Response::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Response*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(type_, request_id_);
  if (GetArenaNoVirtual() == NULL && response_general_ != NULL) delete response_general_;
  response_general_ = NULL;
  if (GetArenaNoVirtual() == NULL && response_psmove_count_ != NULL) delete response_psmove_count_;
  response_psmove_count_ = NULL;

#undef ZR_HELPER_
#undef ZR_

}

bool Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PSMoveDataFrame.Response)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .PSMoveDataFrame.Response.ResponseType type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::PSMoveDataFrame::Response_ResponseType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_request_id;
        break;
      }

      // optional int32 request_id = 2;
      case 2: {
        if (tag == 16) {
         parse_request_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &request_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(170)) goto parse_response_general;
        break;
      }

      // optional .PSMoveDataFrame.Response.ResponseGeneral response_general = 21;
      case 21: {
        if (tag == 170) {
         parse_response_general:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_response_general()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(178)) goto parse_response_psmove_count;
        break;
      }

      // optional .PSMoveDataFrame.Response.ResponseActivePSMoveCount response_psmove_count = 22;
      case 22: {
        if (tag == 178) {
         parse_response_psmove_count:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_response_psmove_count()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PSMoveDataFrame.Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PSMoveDataFrame.Response)
  return false;
#undef DO_
}

void Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PSMoveDataFrame.Response)
  // optional .PSMoveDataFrame.Response.ResponseType type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional int32 request_id = 2;
  if (this->request_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->request_id(), output);
  }

  // optional .PSMoveDataFrame.Response.ResponseGeneral response_general = 21;
  if (this->has_response_general()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      21, *this->response_general_, output);
  }

  // optional .PSMoveDataFrame.Response.ResponseActivePSMoveCount response_psmove_count = 22;
  if (this->has_response_psmove_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      22, *this->response_psmove_count_, output);
  }

  // @@protoc_insertion_point(serialize_end:PSMoveDataFrame.Response)
}

::google::protobuf::uint8* Response::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PSMoveDataFrame.Response)
  // optional .PSMoveDataFrame.Response.ResponseType type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional int32 request_id = 2;
  if (this->request_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->request_id(), target);
  }

  // optional .PSMoveDataFrame.Response.ResponseGeneral response_general = 21;
  if (this->has_response_general()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        21, *this->response_general_, target);
  }

  // optional .PSMoveDataFrame.Response.ResponseActivePSMoveCount response_psmove_count = 22;
  if (this->has_response_psmove_count()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        22, *this->response_psmove_count_, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:PSMoveDataFrame.Response)
  return target;
}

int Response::ByteSize() const {
  int total_size = 0;

  // optional .PSMoveDataFrame.Response.ResponseType type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  // optional int32 request_id = 2;
  if (this->request_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->request_id());
  }

  // optional .PSMoveDataFrame.Response.ResponseGeneral response_general = 21;
  if (this->has_response_general()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->response_general_);
  }

  // optional .PSMoveDataFrame.Response.ResponseActivePSMoveCount response_psmove_count = 22;
  if (this->has_response_psmove_count()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->response_psmove_count_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Response::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Response* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Response>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Response::MergeFrom(const Response& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.request_id() != 0) {
    set_request_id(from.request_id());
  }
  if (from.has_response_general()) {
    mutable_response_general()->::PSMoveDataFrame::Response_ResponseGeneral::MergeFrom(from.response_general());
  }
  if (from.has_response_psmove_count()) {
    mutable_response_psmove_count()->::PSMoveDataFrame::Response_ResponseActivePSMoveCount::MergeFrom(from.response_psmove_count());
  }
}

void Response::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Response::CopyFrom(const Response& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Response::IsInitialized() const {

  return true;
}

void Response::Swap(Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Response::InternalSwap(Response* other) {
  std::swap(type_, other->type_);
  std::swap(request_id_, other->request_id_);
  std::swap(response_general_, other->response_general_);
  std::swap(response_psmove_count_, other->response_psmove_count_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Response::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Response_descriptor_;
  metadata.reflection = Response_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Response_ResponseGeneral

// optional .PSMoveDataFrame.Response.ResultCode code = 1;
void Response_ResponseGeneral::clear_code() {
  code_ = 0;
}
 ::PSMoveDataFrame::Response_ResultCode Response_ResponseGeneral::code() const {
  // @@protoc_insertion_point(field_get:PSMoveDataFrame.Response.ResponseGeneral.code)
  return static_cast< ::PSMoveDataFrame::Response_ResultCode >(code_);
}
 void Response_ResponseGeneral::set_code(::PSMoveDataFrame::Response_ResultCode value) {
  
  code_ = value;
  // @@protoc_insertion_point(field_set:PSMoveDataFrame.Response.ResponseGeneral.code)
}

// -------------------------------------------------------------------

// Response_ResponseActivePSMoveCount

// optional int32 count = 1;
void Response_ResponseActivePSMoveCount::clear_count() {
  count_ = 0;
}
 ::google::protobuf::int32 Response_ResponseActivePSMoveCount::count() const {
  // @@protoc_insertion_point(field_get:PSMoveDataFrame.Response.ResponseActivePSMoveCount.count)
  return count_;
}
 void Response_ResponseActivePSMoveCount::set_count(::google::protobuf::int32 value) {
  
  count_ = value;
  // @@protoc_insertion_point(field_set:PSMoveDataFrame.Response.ResponseActivePSMoveCount.count)
}

// -------------------------------------------------------------------

// Response

// optional .PSMoveDataFrame.Response.ResponseType type = 1;
void Response::clear_type() {
  type_ = 0;
}
 ::PSMoveDataFrame::Response_ResponseType Response::type() const {
  // @@protoc_insertion_point(field_get:PSMoveDataFrame.Response.type)
  return static_cast< ::PSMoveDataFrame::Response_ResponseType >(type_);
}
 void Response::set_type(::PSMoveDataFrame::Response_ResponseType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:PSMoveDataFrame.Response.type)
}

// optional int32 request_id = 2;
void Response::clear_request_id() {
  request_id_ = 0;
}
 ::google::protobuf::int32 Response::request_id() const {
  // @@protoc_insertion_point(field_get:PSMoveDataFrame.Response.request_id)
  return request_id_;
}
 void Response::set_request_id(::google::protobuf::int32 value) {
  
  request_id_ = value;
  // @@protoc_insertion_point(field_set:PSMoveDataFrame.Response.request_id)
}

// optional .PSMoveDataFrame.Response.ResponseGeneral response_general = 21;
bool Response::has_response_general() const {
  return !_is_default_instance_ && response_general_ != NULL;
}
void Response::clear_response_general() {
  if (GetArenaNoVirtual() == NULL && response_general_ != NULL) delete response_general_;
  response_general_ = NULL;
}
const ::PSMoveDataFrame::Response_ResponseGeneral& Response::response_general() const {
  // @@protoc_insertion_point(field_get:PSMoveDataFrame.Response.response_general)
  return response_general_ != NULL ? *response_general_ : *default_instance_->response_general_;
}
::PSMoveDataFrame::Response_ResponseGeneral* Response::mutable_response_general() {
  
  if (response_general_ == NULL) {
    response_general_ = new ::PSMoveDataFrame::Response_ResponseGeneral;
  }
  // @@protoc_insertion_point(field_mutable:PSMoveDataFrame.Response.response_general)
  return response_general_;
}
::PSMoveDataFrame::Response_ResponseGeneral* Response::release_response_general() {
  
  ::PSMoveDataFrame::Response_ResponseGeneral* temp = response_general_;
  response_general_ = NULL;
  return temp;
}
void Response::set_allocated_response_general(::PSMoveDataFrame::Response_ResponseGeneral* response_general) {
  delete response_general_;
  response_general_ = response_general;
  if (response_general) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:PSMoveDataFrame.Response.response_general)
}

// optional .PSMoveDataFrame.Response.ResponseActivePSMoveCount response_psmove_count = 22;
bool Response::has_response_psmove_count() const {
  return !_is_default_instance_ && response_psmove_count_ != NULL;
}
void Response::clear_response_psmove_count() {
  if (GetArenaNoVirtual() == NULL && response_psmove_count_ != NULL) delete response_psmove_count_;
  response_psmove_count_ = NULL;
}
const ::PSMoveDataFrame::Response_ResponseActivePSMoveCount& Response::response_psmove_count() const {
  // @@protoc_insertion_point(field_get:PSMoveDataFrame.Response.response_psmove_count)
  return response_psmove_count_ != NULL ? *response_psmove_count_ : *default_instance_->response_psmove_count_;
}
::PSMoveDataFrame::Response_ResponseActivePSMoveCount* Response::mutable_response_psmove_count() {
  
  if (response_psmove_count_ == NULL) {
    response_psmove_count_ = new ::PSMoveDataFrame::Response_ResponseActivePSMoveCount;
  }
  // @@protoc_insertion_point(field_mutable:PSMoveDataFrame.Response.response_psmove_count)
  return response_psmove_count_;
}
::PSMoveDataFrame::Response_ResponseActivePSMoveCount* Response::release_response_psmove_count() {
  
  ::PSMoveDataFrame::Response_ResponseActivePSMoveCount* temp = response_psmove_count_;
  response_psmove_count_ = NULL;
  return temp;
}
void Response::set_allocated_response_psmove_count(::PSMoveDataFrame::Response_ResponseActivePSMoveCount* response_psmove_count) {
  delete response_psmove_count_;
  response_psmove_count_ = response_psmove_count;
  if (response_psmove_count) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:PSMoveDataFrame.Response.response_psmove_count)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int ControllerDataFrame_Position::kXFieldNumber;
const int ControllerDataFrame_Position::kYFieldNumber;
const int ControllerDataFrame_Position::kZFieldNumber;
#endif  // !_MSC_VER

ControllerDataFrame_Position::ControllerDataFrame_Position()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PSMoveDataFrame.ControllerDataFrame.Position)
}

void ControllerDataFrame_Position::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

ControllerDataFrame_Position::ControllerDataFrame_Position(const ControllerDataFrame_Position& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PSMoveDataFrame.ControllerDataFrame.Position)
}

void ControllerDataFrame_Position::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  z_ = 0;
}

ControllerDataFrame_Position::~ControllerDataFrame_Position() {
  // @@protoc_insertion_point(destructor:PSMoveDataFrame.ControllerDataFrame.Position)
  SharedDtor();
}

void ControllerDataFrame_Position::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ControllerDataFrame_Position::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ControllerDataFrame_Position::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ControllerDataFrame_Position_descriptor_;
}

const ControllerDataFrame_Position& ControllerDataFrame_Position::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PSMoveDataFrame_2eproto();
  return *default_instance_;
}

ControllerDataFrame_Position* ControllerDataFrame_Position::default_instance_ = NULL;

ControllerDataFrame_Position* ControllerDataFrame_Position::New(::google::protobuf::Arena* arena) const {
  ControllerDataFrame_Position* n = new ControllerDataFrame_Position;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ControllerDataFrame_Position::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ControllerDataFrame_Position*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(x_, z_);

#undef ZR_HELPER_
#undef ZR_

}

bool ControllerDataFrame_Position::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PSMoveDataFrame.ControllerDataFrame.Position)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float x = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_y;
        break;
      }

      // optional float y = 2;
      case 2: {
        if (tag == 21) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_z;
        break;
      }

      // optional float z = 3;
      case 3: {
        if (tag == 29) {
         parse_z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &z_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PSMoveDataFrame.ControllerDataFrame.Position)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PSMoveDataFrame.ControllerDataFrame.Position)
  return false;
#undef DO_
}

void ControllerDataFrame_Position::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PSMoveDataFrame.ControllerDataFrame.Position)
  // optional float x = 1;
  if (this->x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }

  // optional float y = 2;
  if (this->y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }

  // optional float z = 3;
  if (this->z() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->z(), output);
  }

  // @@protoc_insertion_point(serialize_end:PSMoveDataFrame.ControllerDataFrame.Position)
}

::google::protobuf::uint8* ControllerDataFrame_Position::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PSMoveDataFrame.ControllerDataFrame.Position)
  // optional float x = 1;
  if (this->x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x(), target);
  }

  // optional float y = 2;
  if (this->y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y(), target);
  }

  // optional float z = 3;
  if (this->z() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->z(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:PSMoveDataFrame.ControllerDataFrame.Position)
  return target;
}

int ControllerDataFrame_Position::ByteSize() const {
  int total_size = 0;

  // optional float x = 1;
  if (this->x() != 0) {
    total_size += 1 + 4;
  }

  // optional float y = 2;
  if (this->y() != 0) {
    total_size += 1 + 4;
  }

  // optional float z = 3;
  if (this->z() != 0) {
    total_size += 1 + 4;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ControllerDataFrame_Position::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ControllerDataFrame_Position* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ControllerDataFrame_Position>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ControllerDataFrame_Position::MergeFrom(const ControllerDataFrame_Position& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.x() != 0) {
    set_x(from.x());
  }
  if (from.y() != 0) {
    set_y(from.y());
  }
  if (from.z() != 0) {
    set_z(from.z());
  }
}

void ControllerDataFrame_Position::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ControllerDataFrame_Position::CopyFrom(const ControllerDataFrame_Position& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ControllerDataFrame_Position::IsInitialized() const {

  return true;
}

void ControllerDataFrame_Position::Swap(ControllerDataFrame_Position* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ControllerDataFrame_Position::InternalSwap(ControllerDataFrame_Position* other) {
  std::swap(x_, other->x_);
  std::swap(y_, other->y_);
  std::swap(z_, other->z_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ControllerDataFrame_Position::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ControllerDataFrame_Position_descriptor_;
  metadata.reflection = ControllerDataFrame_Position_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int ControllerDataFrame_Orientation::kXFieldNumber;
const int ControllerDataFrame_Orientation::kYFieldNumber;
const int ControllerDataFrame_Orientation::kZFieldNumber;
const int ControllerDataFrame_Orientation::kWFieldNumber;
#endif  // !_MSC_VER

ControllerDataFrame_Orientation::ControllerDataFrame_Orientation()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PSMoveDataFrame.ControllerDataFrame.Orientation)
}

void ControllerDataFrame_Orientation::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

ControllerDataFrame_Orientation::ControllerDataFrame_Orientation(const ControllerDataFrame_Orientation& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PSMoveDataFrame.ControllerDataFrame.Orientation)
}

void ControllerDataFrame_Orientation::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  z_ = 0;
  w_ = 0;
}

ControllerDataFrame_Orientation::~ControllerDataFrame_Orientation() {
  // @@protoc_insertion_point(destructor:PSMoveDataFrame.ControllerDataFrame.Orientation)
  SharedDtor();
}

void ControllerDataFrame_Orientation::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ControllerDataFrame_Orientation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ControllerDataFrame_Orientation::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ControllerDataFrame_Orientation_descriptor_;
}

const ControllerDataFrame_Orientation& ControllerDataFrame_Orientation::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PSMoveDataFrame_2eproto();
  return *default_instance_;
}

ControllerDataFrame_Orientation* ControllerDataFrame_Orientation::default_instance_ = NULL;

ControllerDataFrame_Orientation* ControllerDataFrame_Orientation::New(::google::protobuf::Arena* arena) const {
  ControllerDataFrame_Orientation* n = new ControllerDataFrame_Orientation;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ControllerDataFrame_Orientation::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ControllerDataFrame_Orientation*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(x_, w_);

#undef ZR_HELPER_
#undef ZR_

}

bool ControllerDataFrame_Orientation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PSMoveDataFrame.ControllerDataFrame.Orientation)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float x = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_y;
        break;
      }

      // optional float y = 2;
      case 2: {
        if (tag == 21) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_z;
        break;
      }

      // optional float z = 3;
      case 3: {
        if (tag == 29) {
         parse_z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &z_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_w;
        break;
      }

      // optional float w = 4;
      case 4: {
        if (tag == 37) {
         parse_w:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &w_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PSMoveDataFrame.ControllerDataFrame.Orientation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PSMoveDataFrame.ControllerDataFrame.Orientation)
  return false;
#undef DO_
}

void ControllerDataFrame_Orientation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PSMoveDataFrame.ControllerDataFrame.Orientation)
  // optional float x = 1;
  if (this->x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }

  // optional float y = 2;
  if (this->y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }

  // optional float z = 3;
  if (this->z() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->z(), output);
  }

  // optional float w = 4;
  if (this->w() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->w(), output);
  }

  // @@protoc_insertion_point(serialize_end:PSMoveDataFrame.ControllerDataFrame.Orientation)
}

::google::protobuf::uint8* ControllerDataFrame_Orientation::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PSMoveDataFrame.ControllerDataFrame.Orientation)
  // optional float x = 1;
  if (this->x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x(), target);
  }

  // optional float y = 2;
  if (this->y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y(), target);
  }

  // optional float z = 3;
  if (this->z() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->z(), target);
  }

  // optional float w = 4;
  if (this->w() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->w(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:PSMoveDataFrame.ControllerDataFrame.Orientation)
  return target;
}

int ControllerDataFrame_Orientation::ByteSize() const {
  int total_size = 0;

  // optional float x = 1;
  if (this->x() != 0) {
    total_size += 1 + 4;
  }

  // optional float y = 2;
  if (this->y() != 0) {
    total_size += 1 + 4;
  }

  // optional float z = 3;
  if (this->z() != 0) {
    total_size += 1 + 4;
  }

  // optional float w = 4;
  if (this->w() != 0) {
    total_size += 1 + 4;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ControllerDataFrame_Orientation::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ControllerDataFrame_Orientation* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ControllerDataFrame_Orientation>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ControllerDataFrame_Orientation::MergeFrom(const ControllerDataFrame_Orientation& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.x() != 0) {
    set_x(from.x());
  }
  if (from.y() != 0) {
    set_y(from.y());
  }
  if (from.z() != 0) {
    set_z(from.z());
  }
  if (from.w() != 0) {
    set_w(from.w());
  }
}

void ControllerDataFrame_Orientation::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ControllerDataFrame_Orientation::CopyFrom(const ControllerDataFrame_Orientation& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ControllerDataFrame_Orientation::IsInitialized() const {

  return true;
}

void ControllerDataFrame_Orientation::Swap(ControllerDataFrame_Orientation* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ControllerDataFrame_Orientation::InternalSwap(ControllerDataFrame_Orientation* other) {
  std::swap(x_, other->x_);
  std::swap(y_, other->y_);
  std::swap(z_, other->z_);
  std::swap(w_, other->w_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ControllerDataFrame_Orientation::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ControllerDataFrame_Orientation_descriptor_;
  metadata.reflection = ControllerDataFrame_Orientation_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int ControllerDataFrame::kSequenceNumFieldNumber;
const int ControllerDataFrame::kIsConnectedFieldNumber;
const int ControllerDataFrame::kIsTrackingEnabledFieldNumber;
const int ControllerDataFrame::kIsCurrentlyTrackingFieldNumber;
const int ControllerDataFrame::kPositionFieldNumber;
const int ControllerDataFrame::kOrientationFieldNumber;
const int ControllerDataFrame::kButtonDownBitmaskFieldNumber;
const int ControllerDataFrame::kTriggerValueFieldNumber;
#endif  // !_MSC_VER

ControllerDataFrame::ControllerDataFrame()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PSMoveDataFrame.ControllerDataFrame)
}

void ControllerDataFrame::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  position_ = const_cast< ::PSMoveDataFrame::ControllerDataFrame_Position*>(&::PSMoveDataFrame::ControllerDataFrame_Position::default_instance());
  orientation_ = const_cast< ::PSMoveDataFrame::ControllerDataFrame_Orientation*>(&::PSMoveDataFrame::ControllerDataFrame_Orientation::default_instance());
}

ControllerDataFrame::ControllerDataFrame(const ControllerDataFrame& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PSMoveDataFrame.ControllerDataFrame)
}

void ControllerDataFrame::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  sequence_num_ = 0;
  isconnected_ = false;
  istrackingenabled_ = false;
  iscurrentlytracking_ = false;
  position_ = NULL;
  orientation_ = NULL;
  button_down_bitmask_ = 0u;
  trigger_value_ = 0;
}

ControllerDataFrame::~ControllerDataFrame() {
  // @@protoc_insertion_point(destructor:PSMoveDataFrame.ControllerDataFrame)
  SharedDtor();
}

void ControllerDataFrame::SharedDtor() {
  if (this != default_instance_) {
    delete position_;
    delete orientation_;
  }
}

void ControllerDataFrame::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ControllerDataFrame::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ControllerDataFrame_descriptor_;
}

const ControllerDataFrame& ControllerDataFrame::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PSMoveDataFrame_2eproto();
  return *default_instance_;
}

ControllerDataFrame* ControllerDataFrame::default_instance_ = NULL;

ControllerDataFrame* ControllerDataFrame::New(::google::protobuf::Arena* arena) const {
  ControllerDataFrame* n = new ControllerDataFrame;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ControllerDataFrame::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ControllerDataFrame*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(sequence_num_, iscurrentlytracking_);
  ZR_(button_down_bitmask_, trigger_value_);
  if (GetArenaNoVirtual() == NULL && position_ != NULL) delete position_;
  position_ = NULL;
  if (GetArenaNoVirtual() == NULL && orientation_ != NULL) delete orientation_;
  orientation_ = NULL;

#undef ZR_HELPER_
#undef ZR_

}

bool ControllerDataFrame::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PSMoveDataFrame.ControllerDataFrame)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 sequence_num = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sequence_num_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_IsConnected;
        break;
      }

      // optional bool IsConnected = 2;
      case 2: {
        if (tag == 16) {
         parse_IsConnected:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isconnected_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_IsTrackingEnabled;
        break;
      }

      // optional bool IsTrackingEnabled = 3;
      case 3: {
        if (tag == 24) {
         parse_IsTrackingEnabled:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &istrackingenabled_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_IsCurrentlyTracking;
        break;
      }

      // optional bool IsCurrentlyTracking = 4;
      case 4: {
        if (tag == 32) {
         parse_IsCurrentlyTracking:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &iscurrentlytracking_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_position;
        break;
      }

      // optional .PSMoveDataFrame.ControllerDataFrame.Position position = 5;
      case 5: {
        if (tag == 42) {
         parse_position:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_position()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_orientation;
        break;
      }

      // optional .PSMoveDataFrame.ControllerDataFrame.Orientation orientation = 6;
      case 6: {
        if (tag == 50) {
         parse_orientation:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_orientation()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_button_down_bitmask;
        break;
      }

      // optional uint32 button_down_bitmask = 7;
      case 7: {
        if (tag == 56) {
         parse_button_down_bitmask:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &button_down_bitmask_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_trigger_value;
        break;
      }

      // optional int32 trigger_value = 8;
      case 8: {
        if (tag == 64) {
         parse_trigger_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &trigger_value_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PSMoveDataFrame.ControllerDataFrame)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PSMoveDataFrame.ControllerDataFrame)
  return false;
#undef DO_
}

void ControllerDataFrame::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PSMoveDataFrame.ControllerDataFrame)
  // optional int32 sequence_num = 1;
  if (this->sequence_num() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->sequence_num(), output);
  }

  // optional bool IsConnected = 2;
  if (this->isconnected() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->isconnected(), output);
  }

  // optional bool IsTrackingEnabled = 3;
  if (this->istrackingenabled() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->istrackingenabled(), output);
  }

  // optional bool IsCurrentlyTracking = 4;
  if (this->iscurrentlytracking() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->iscurrentlytracking(), output);
  }

  // optional .PSMoveDataFrame.ControllerDataFrame.Position position = 5;
  if (this->has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->position_, output);
  }

  // optional .PSMoveDataFrame.ControllerDataFrame.Orientation orientation = 6;
  if (this->has_orientation()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->orientation_, output);
  }

  // optional uint32 button_down_bitmask = 7;
  if (this->button_down_bitmask() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->button_down_bitmask(), output);
  }

  // optional int32 trigger_value = 8;
  if (this->trigger_value() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->trigger_value(), output);
  }

  // @@protoc_insertion_point(serialize_end:PSMoveDataFrame.ControllerDataFrame)
}

::google::protobuf::uint8* ControllerDataFrame::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PSMoveDataFrame.ControllerDataFrame)
  // optional int32 sequence_num = 1;
  if (this->sequence_num() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->sequence_num(), target);
  }

  // optional bool IsConnected = 2;
  if (this->isconnected() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->isconnected(), target);
  }

  // optional bool IsTrackingEnabled = 3;
  if (this->istrackingenabled() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->istrackingenabled(), target);
  }

  // optional bool IsCurrentlyTracking = 4;
  if (this->iscurrentlytracking() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->iscurrentlytracking(), target);
  }

  // optional .PSMoveDataFrame.ControllerDataFrame.Position position = 5;
  if (this->has_position()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, *this->position_, target);
  }

  // optional .PSMoveDataFrame.ControllerDataFrame.Orientation orientation = 6;
  if (this->has_orientation()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, *this->orientation_, target);
  }

  // optional uint32 button_down_bitmask = 7;
  if (this->button_down_bitmask() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->button_down_bitmask(), target);
  }

  // optional int32 trigger_value = 8;
  if (this->trigger_value() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->trigger_value(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:PSMoveDataFrame.ControllerDataFrame)
  return target;
}

int ControllerDataFrame::ByteSize() const {
  int total_size = 0;

  // optional int32 sequence_num = 1;
  if (this->sequence_num() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->sequence_num());
  }

  // optional bool IsConnected = 2;
  if (this->isconnected() != 0) {
    total_size += 1 + 1;
  }

  // optional bool IsTrackingEnabled = 3;
  if (this->istrackingenabled() != 0) {
    total_size += 1 + 1;
  }

  // optional bool IsCurrentlyTracking = 4;
  if (this->iscurrentlytracking() != 0) {
    total_size += 1 + 1;
  }

  // optional .PSMoveDataFrame.ControllerDataFrame.Position position = 5;
  if (this->has_position()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->position_);
  }

  // optional .PSMoveDataFrame.ControllerDataFrame.Orientation orientation = 6;
  if (this->has_orientation()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->orientation_);
  }

  // optional uint32 button_down_bitmask = 7;
  if (this->button_down_bitmask() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->button_down_bitmask());
  }

  // optional int32 trigger_value = 8;
  if (this->trigger_value() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->trigger_value());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ControllerDataFrame::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ControllerDataFrame* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ControllerDataFrame>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ControllerDataFrame::MergeFrom(const ControllerDataFrame& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.sequence_num() != 0) {
    set_sequence_num(from.sequence_num());
  }
  if (from.isconnected() != 0) {
    set_isconnected(from.isconnected());
  }
  if (from.istrackingenabled() != 0) {
    set_istrackingenabled(from.istrackingenabled());
  }
  if (from.iscurrentlytracking() != 0) {
    set_iscurrentlytracking(from.iscurrentlytracking());
  }
  if (from.has_position()) {
    mutable_position()->::PSMoveDataFrame::ControllerDataFrame_Position::MergeFrom(from.position());
  }
  if (from.has_orientation()) {
    mutable_orientation()->::PSMoveDataFrame::ControllerDataFrame_Orientation::MergeFrom(from.orientation());
  }
  if (from.button_down_bitmask() != 0) {
    set_button_down_bitmask(from.button_down_bitmask());
  }
  if (from.trigger_value() != 0) {
    set_trigger_value(from.trigger_value());
  }
}

void ControllerDataFrame::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ControllerDataFrame::CopyFrom(const ControllerDataFrame& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ControllerDataFrame::IsInitialized() const {

  return true;
}

void ControllerDataFrame::Swap(ControllerDataFrame* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ControllerDataFrame::InternalSwap(ControllerDataFrame* other) {
  std::swap(sequence_num_, other->sequence_num_);
  std::swap(isconnected_, other->isconnected_);
  std::swap(istrackingenabled_, other->istrackingenabled_);
  std::swap(iscurrentlytracking_, other->iscurrentlytracking_);
  std::swap(position_, other->position_);
  std::swap(orientation_, other->orientation_);
  std::swap(button_down_bitmask_, other->button_down_bitmask_);
  std::swap(trigger_value_, other->trigger_value_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ControllerDataFrame::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ControllerDataFrame_descriptor_;
  metadata.reflection = ControllerDataFrame_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ControllerDataFrame_Position

// optional float x = 1;
void ControllerDataFrame_Position::clear_x() {
  x_ = 0;
}
 float ControllerDataFrame_Position::x() const {
  // @@protoc_insertion_point(field_get:PSMoveDataFrame.ControllerDataFrame.Position.x)
  return x_;
}
 void ControllerDataFrame_Position::set_x(float value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:PSMoveDataFrame.ControllerDataFrame.Position.x)
}

// optional float y = 2;
void ControllerDataFrame_Position::clear_y() {
  y_ = 0;
}
 float ControllerDataFrame_Position::y() const {
  // @@protoc_insertion_point(field_get:PSMoveDataFrame.ControllerDataFrame.Position.y)
  return y_;
}
 void ControllerDataFrame_Position::set_y(float value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:PSMoveDataFrame.ControllerDataFrame.Position.y)
}

// optional float z = 3;
void ControllerDataFrame_Position::clear_z() {
  z_ = 0;
}
 float ControllerDataFrame_Position::z() const {
  // @@protoc_insertion_point(field_get:PSMoveDataFrame.ControllerDataFrame.Position.z)
  return z_;
}
 void ControllerDataFrame_Position::set_z(float value) {
  
  z_ = value;
  // @@protoc_insertion_point(field_set:PSMoveDataFrame.ControllerDataFrame.Position.z)
}

// -------------------------------------------------------------------

// ControllerDataFrame_Orientation

// optional float x = 1;
void ControllerDataFrame_Orientation::clear_x() {
  x_ = 0;
}
 float ControllerDataFrame_Orientation::x() const {
  // @@protoc_insertion_point(field_get:PSMoveDataFrame.ControllerDataFrame.Orientation.x)
  return x_;
}
 void ControllerDataFrame_Orientation::set_x(float value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:PSMoveDataFrame.ControllerDataFrame.Orientation.x)
}

// optional float y = 2;
void ControllerDataFrame_Orientation::clear_y() {
  y_ = 0;
}
 float ControllerDataFrame_Orientation::y() const {
  // @@protoc_insertion_point(field_get:PSMoveDataFrame.ControllerDataFrame.Orientation.y)
  return y_;
}
 void ControllerDataFrame_Orientation::set_y(float value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:PSMoveDataFrame.ControllerDataFrame.Orientation.y)
}

// optional float z = 3;
void ControllerDataFrame_Orientation::clear_z() {
  z_ = 0;
}
 float ControllerDataFrame_Orientation::z() const {
  // @@protoc_insertion_point(field_get:PSMoveDataFrame.ControllerDataFrame.Orientation.z)
  return z_;
}
 void ControllerDataFrame_Orientation::set_z(float value) {
  
  z_ = value;
  // @@protoc_insertion_point(field_set:PSMoveDataFrame.ControllerDataFrame.Orientation.z)
}

// optional float w = 4;
void ControllerDataFrame_Orientation::clear_w() {
  w_ = 0;
}
 float ControllerDataFrame_Orientation::w() const {
  // @@protoc_insertion_point(field_get:PSMoveDataFrame.ControllerDataFrame.Orientation.w)
  return w_;
}
 void ControllerDataFrame_Orientation::set_w(float value) {
  
  w_ = value;
  // @@protoc_insertion_point(field_set:PSMoveDataFrame.ControllerDataFrame.Orientation.w)
}

// -------------------------------------------------------------------

// ControllerDataFrame

// optional int32 sequence_num = 1;
void ControllerDataFrame::clear_sequence_num() {
  sequence_num_ = 0;
}
 ::google::protobuf::int32 ControllerDataFrame::sequence_num() const {
  // @@protoc_insertion_point(field_get:PSMoveDataFrame.ControllerDataFrame.sequence_num)
  return sequence_num_;
}
 void ControllerDataFrame::set_sequence_num(::google::protobuf::int32 value) {
  
  sequence_num_ = value;
  // @@protoc_insertion_point(field_set:PSMoveDataFrame.ControllerDataFrame.sequence_num)
}

// optional bool IsConnected = 2;
void ControllerDataFrame::clear_isconnected() {
  isconnected_ = false;
}
 bool ControllerDataFrame::isconnected() const {
  // @@protoc_insertion_point(field_get:PSMoveDataFrame.ControllerDataFrame.IsConnected)
  return isconnected_;
}
 void ControllerDataFrame::set_isconnected(bool value) {
  
  isconnected_ = value;
  // @@protoc_insertion_point(field_set:PSMoveDataFrame.ControllerDataFrame.IsConnected)
}

// optional bool IsTrackingEnabled = 3;
void ControllerDataFrame::clear_istrackingenabled() {
  istrackingenabled_ = false;
}
 bool ControllerDataFrame::istrackingenabled() const {
  // @@protoc_insertion_point(field_get:PSMoveDataFrame.ControllerDataFrame.IsTrackingEnabled)
  return istrackingenabled_;
}
 void ControllerDataFrame::set_istrackingenabled(bool value) {
  
  istrackingenabled_ = value;
  // @@protoc_insertion_point(field_set:PSMoveDataFrame.ControllerDataFrame.IsTrackingEnabled)
}

// optional bool IsCurrentlyTracking = 4;
void ControllerDataFrame::clear_iscurrentlytracking() {
  iscurrentlytracking_ = false;
}
 bool ControllerDataFrame::iscurrentlytracking() const {
  // @@protoc_insertion_point(field_get:PSMoveDataFrame.ControllerDataFrame.IsCurrentlyTracking)
  return iscurrentlytracking_;
}
 void ControllerDataFrame::set_iscurrentlytracking(bool value) {
  
  iscurrentlytracking_ = value;
  // @@protoc_insertion_point(field_set:PSMoveDataFrame.ControllerDataFrame.IsCurrentlyTracking)
}

// optional .PSMoveDataFrame.ControllerDataFrame.Position position = 5;
bool ControllerDataFrame::has_position() const {
  return !_is_default_instance_ && position_ != NULL;
}
void ControllerDataFrame::clear_position() {
  if (GetArenaNoVirtual() == NULL && position_ != NULL) delete position_;
  position_ = NULL;
}
const ::PSMoveDataFrame::ControllerDataFrame_Position& ControllerDataFrame::position() const {
  // @@protoc_insertion_point(field_get:PSMoveDataFrame.ControllerDataFrame.position)
  return position_ != NULL ? *position_ : *default_instance_->position_;
}
::PSMoveDataFrame::ControllerDataFrame_Position* ControllerDataFrame::mutable_position() {
  
  if (position_ == NULL) {
    position_ = new ::PSMoveDataFrame::ControllerDataFrame_Position;
  }
  // @@protoc_insertion_point(field_mutable:PSMoveDataFrame.ControllerDataFrame.position)
  return position_;
}
::PSMoveDataFrame::ControllerDataFrame_Position* ControllerDataFrame::release_position() {
  
  ::PSMoveDataFrame::ControllerDataFrame_Position* temp = position_;
  position_ = NULL;
  return temp;
}
void ControllerDataFrame::set_allocated_position(::PSMoveDataFrame::ControllerDataFrame_Position* position) {
  delete position_;
  position_ = position;
  if (position) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:PSMoveDataFrame.ControllerDataFrame.position)
}

// optional .PSMoveDataFrame.ControllerDataFrame.Orientation orientation = 6;
bool ControllerDataFrame::has_orientation() const {
  return !_is_default_instance_ && orientation_ != NULL;
}
void ControllerDataFrame::clear_orientation() {
  if (GetArenaNoVirtual() == NULL && orientation_ != NULL) delete orientation_;
  orientation_ = NULL;
}
const ::PSMoveDataFrame::ControllerDataFrame_Orientation& ControllerDataFrame::orientation() const {
  // @@protoc_insertion_point(field_get:PSMoveDataFrame.ControllerDataFrame.orientation)
  return orientation_ != NULL ? *orientation_ : *default_instance_->orientation_;
}
::PSMoveDataFrame::ControllerDataFrame_Orientation* ControllerDataFrame::mutable_orientation() {
  
  if (orientation_ == NULL) {
    orientation_ = new ::PSMoveDataFrame::ControllerDataFrame_Orientation;
  }
  // @@protoc_insertion_point(field_mutable:PSMoveDataFrame.ControllerDataFrame.orientation)
  return orientation_;
}
::PSMoveDataFrame::ControllerDataFrame_Orientation* ControllerDataFrame::release_orientation() {
  
  ::PSMoveDataFrame::ControllerDataFrame_Orientation* temp = orientation_;
  orientation_ = NULL;
  return temp;
}
void ControllerDataFrame::set_allocated_orientation(::PSMoveDataFrame::ControllerDataFrame_Orientation* orientation) {
  delete orientation_;
  orientation_ = orientation;
  if (orientation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:PSMoveDataFrame.ControllerDataFrame.orientation)
}

// optional uint32 button_down_bitmask = 7;
void ControllerDataFrame::clear_button_down_bitmask() {
  button_down_bitmask_ = 0u;
}
 ::google::protobuf::uint32 ControllerDataFrame::button_down_bitmask() const {
  // @@protoc_insertion_point(field_get:PSMoveDataFrame.ControllerDataFrame.button_down_bitmask)
  return button_down_bitmask_;
}
 void ControllerDataFrame::set_button_down_bitmask(::google::protobuf::uint32 value) {
  
  button_down_bitmask_ = value;
  // @@protoc_insertion_point(field_set:PSMoveDataFrame.ControllerDataFrame.button_down_bitmask)
}

// optional int32 trigger_value = 8;
void ControllerDataFrame::clear_trigger_value() {
  trigger_value_ = 0;
}
 ::google::protobuf::int32 ControllerDataFrame::trigger_value() const {
  // @@protoc_insertion_point(field_get:PSMoveDataFrame.ControllerDataFrame.trigger_value)
  return trigger_value_;
}
 void ControllerDataFrame::set_trigger_value(::google::protobuf::int32 value) {
  
  trigger_value_ = value;
  // @@protoc_insertion_point(field_set:PSMoveDataFrame.ControllerDataFrame.trigger_value)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace PSMoveDataFrame

// @@protoc_insertion_point(global_scope)

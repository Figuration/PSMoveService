// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PSMoveDataFrame.proto

#ifndef PROTOBUF_PSMoveDataFrame_2eproto__INCLUDED
#define PROTOBUF_PSMoveDataFrame_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace PSMoveDataFrame {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_PSMoveDataFrame_2eproto();
void protobuf_AssignDesc_PSMoveDataFrame_2eproto();
void protobuf_ShutdownFile_PSMoveDataFrame_2eproto();

class ControllerDataFrame;
class ControllerDataFrame_Orientation;
class ControllerDataFrame_Position;
class Request;
class Request_RequestAcquirePSMove;
class Request_RequestReleasePSMove;
class Request_RequestSetRumble;
class Response;
class Response_ResponseActivePSMoveCount;
class Response_ResponseGeneral;

enum Request_RequestType {
  Request_RequestType_GET_ACTIVE_PSMOVE_COUNT = 0,
  Request_RequestType_ACQUIRE_PSMOVE = 1,
  Request_RequestType_RELEASE_PSMOVE = 2,
  Request_RequestType_SET_RUMBLE = 3,
  Request_RequestType_CYCLE_TRACKING_COLOR = 4,
  Request_RequestType_RESET_POSE = 5,
  Request_RequestType_Request_RequestType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Request_RequestType_Request_RequestType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Request_RequestType_IsValid(int value);
const Request_RequestType Request_RequestType_RequestType_MIN = Request_RequestType_GET_ACTIVE_PSMOVE_COUNT;
const Request_RequestType Request_RequestType_RequestType_MAX = Request_RequestType_RESET_POSE;
const int Request_RequestType_RequestType_ARRAYSIZE = Request_RequestType_RequestType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Request_RequestType_descriptor();
inline const ::std::string& Request_RequestType_Name(Request_RequestType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Request_RequestType_descriptor(), value);
}
inline bool Request_RequestType_Parse(
    const ::std::string& name, Request_RequestType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Request_RequestType>(
    Request_RequestType_descriptor(), name, value);
}
enum Response_ResponseType {
  Response_ResponseType_GENERAL_RESULT = 0,
  Response_ResponseType_ACTIVE_PSMOVE_COUNT = 1,
  Response_ResponseType_Response_ResponseType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Response_ResponseType_Response_ResponseType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Response_ResponseType_IsValid(int value);
const Response_ResponseType Response_ResponseType_ResponseType_MIN = Response_ResponseType_GENERAL_RESULT;
const Response_ResponseType Response_ResponseType_ResponseType_MAX = Response_ResponseType_ACTIVE_PSMOVE_COUNT;
const int Response_ResponseType_ResponseType_ARRAYSIZE = Response_ResponseType_ResponseType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Response_ResponseType_descriptor();
inline const ::std::string& Response_ResponseType_Name(Response_ResponseType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Response_ResponseType_descriptor(), value);
}
inline bool Response_ResponseType_Parse(
    const ::std::string& name, Response_ResponseType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Response_ResponseType>(
    Response_ResponseType_descriptor(), name, value);
}
enum Response_ResultCode {
  Response_ResultCode_RESULT_OK = 0,
  Response_ResultCode_RESULT_ERROR = 1,
  Response_ResultCode_Response_ResultCode_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Response_ResultCode_Response_ResultCode_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Response_ResultCode_IsValid(int value);
const Response_ResultCode Response_ResultCode_ResultCode_MIN = Response_ResultCode_RESULT_OK;
const Response_ResultCode Response_ResultCode_ResultCode_MAX = Response_ResultCode_RESULT_ERROR;
const int Response_ResultCode_ResultCode_ARRAYSIZE = Response_ResultCode_ResultCode_MAX + 1;

const ::google::protobuf::EnumDescriptor* Response_ResultCode_descriptor();
inline const ::std::string& Response_ResultCode_Name(Response_ResultCode value) {
  return ::google::protobuf::internal::NameOfEnum(
    Response_ResultCode_descriptor(), value);
}
inline bool Response_ResultCode_Parse(
    const ::std::string& name, Response_ResultCode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Response_ResultCode>(
    Response_ResultCode_descriptor(), name, value);
}
enum ControllerDataFrame_ButtonType {
  ControllerDataFrame_ButtonType_TRIANGLE = 0,
  ControllerDataFrame_ButtonType_CIRCLE = 1,
  ControllerDataFrame_ButtonType_CROSS = 2,
  ControllerDataFrame_ButtonType_SQUARE = 3,
  ControllerDataFrame_ButtonType_SELECT = 4,
  ControllerDataFrame_ButtonType_START = 5,
  ControllerDataFrame_ButtonType_PS = 6,
  ControllerDataFrame_ButtonType_MOVE = 7,
  ControllerDataFrame_ButtonType_TRIGGER = 8,
  ControllerDataFrame_ButtonType_ControllerDataFrame_ButtonType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ControllerDataFrame_ButtonType_ControllerDataFrame_ButtonType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ControllerDataFrame_ButtonType_IsValid(int value);
const ControllerDataFrame_ButtonType ControllerDataFrame_ButtonType_ButtonType_MIN = ControllerDataFrame_ButtonType_TRIANGLE;
const ControllerDataFrame_ButtonType ControllerDataFrame_ButtonType_ButtonType_MAX = ControllerDataFrame_ButtonType_TRIGGER;
const int ControllerDataFrame_ButtonType_ButtonType_ARRAYSIZE = ControllerDataFrame_ButtonType_ButtonType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ControllerDataFrame_ButtonType_descriptor();
inline const ::std::string& ControllerDataFrame_ButtonType_Name(ControllerDataFrame_ButtonType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ControllerDataFrame_ButtonType_descriptor(), value);
}
inline bool ControllerDataFrame_ButtonType_Parse(
    const ::std::string& name, ControllerDataFrame_ButtonType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ControllerDataFrame_ButtonType>(
    ControllerDataFrame_ButtonType_descriptor(), name, value);
}
// ===================================================================

class Request_RequestAcquirePSMove : public ::google::protobuf::Message {
 public:
  Request_RequestAcquirePSMove();
  virtual ~Request_RequestAcquirePSMove();

  Request_RequestAcquirePSMove(const Request_RequestAcquirePSMove& from);

  inline Request_RequestAcquirePSMove& operator=(const Request_RequestAcquirePSMove& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Request_RequestAcquirePSMove& default_instance();

  void Swap(Request_RequestAcquirePSMove* other);

  // implements Message ----------------------------------------------

  inline Request_RequestAcquirePSMove* New() const { return New(NULL); }

  Request_RequestAcquirePSMove* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Request_RequestAcquirePSMove& from);
  void MergeFrom(const Request_RequestAcquirePSMove& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Request_RequestAcquirePSMove* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 psmove_id = 1;
  void clear_psmove_id();
  static const int kPsmoveIdFieldNumber = 1;
  ::google::protobuf::int32 psmove_id() const;
  void set_psmove_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PSMoveDataFrame.Request.RequestAcquirePSMove)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::int32 psmove_id_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_PSMoveDataFrame_2eproto();
  friend void protobuf_AssignDesc_PSMoveDataFrame_2eproto();
  friend void protobuf_ShutdownFile_PSMoveDataFrame_2eproto();

  void InitAsDefaultInstance();
  static Request_RequestAcquirePSMove* default_instance_;
};
// -------------------------------------------------------------------

class Request_RequestReleasePSMove : public ::google::protobuf::Message {
 public:
  Request_RequestReleasePSMove();
  virtual ~Request_RequestReleasePSMove();

  Request_RequestReleasePSMove(const Request_RequestReleasePSMove& from);

  inline Request_RequestReleasePSMove& operator=(const Request_RequestReleasePSMove& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Request_RequestReleasePSMove& default_instance();

  void Swap(Request_RequestReleasePSMove* other);

  // implements Message ----------------------------------------------

  inline Request_RequestReleasePSMove* New() const { return New(NULL); }

  Request_RequestReleasePSMove* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Request_RequestReleasePSMove& from);
  void MergeFrom(const Request_RequestReleasePSMove& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Request_RequestReleasePSMove* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 psmove_id = 1;
  void clear_psmove_id();
  static const int kPsmoveIdFieldNumber = 1;
  ::google::protobuf::int32 psmove_id() const;
  void set_psmove_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PSMoveDataFrame.Request.RequestReleasePSMove)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::int32 psmove_id_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_PSMoveDataFrame_2eproto();
  friend void protobuf_AssignDesc_PSMoveDataFrame_2eproto();
  friend void protobuf_ShutdownFile_PSMoveDataFrame_2eproto();

  void InitAsDefaultInstance();
  static Request_RequestReleasePSMove* default_instance_;
};
// -------------------------------------------------------------------

class Request_RequestSetRumble : public ::google::protobuf::Message {
 public:
  Request_RequestSetRumble();
  virtual ~Request_RequestSetRumble();

  Request_RequestSetRumble(const Request_RequestSetRumble& from);

  inline Request_RequestSetRumble& operator=(const Request_RequestSetRumble& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Request_RequestSetRumble& default_instance();

  void Swap(Request_RequestSetRumble* other);

  // implements Message ----------------------------------------------

  inline Request_RequestSetRumble* New() const { return New(NULL); }

  Request_RequestSetRumble* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Request_RequestSetRumble& from);
  void MergeFrom(const Request_RequestSetRumble& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Request_RequestSetRumble* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 psmove_id = 1;
  void clear_psmove_id();
  static const int kPsmoveIdFieldNumber = 1;
  ::google::protobuf::int32 psmove_id() const;
  void set_psmove_id(::google::protobuf::int32 value);

  // optional int32 rumble = 2;
  void clear_rumble();
  static const int kRumbleFieldNumber = 2;
  ::google::protobuf::int32 rumble() const;
  void set_rumble(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PSMoveDataFrame.Request.RequestSetRumble)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::int32 psmove_id_;
  ::google::protobuf::int32 rumble_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_PSMoveDataFrame_2eproto();
  friend void protobuf_AssignDesc_PSMoveDataFrame_2eproto();
  friend void protobuf_ShutdownFile_PSMoveDataFrame_2eproto();

  void InitAsDefaultInstance();
  static Request_RequestSetRumble* default_instance_;
};
// -------------------------------------------------------------------

class Request : public ::google::protobuf::Message {
 public:
  Request();
  virtual ~Request();

  Request(const Request& from);

  inline Request& operator=(const Request& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Request& default_instance();

  void Swap(Request* other);

  // implements Message ----------------------------------------------

  inline Request* New() const { return New(NULL); }

  Request* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Request& from);
  void MergeFrom(const Request& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Request* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Request_RequestAcquirePSMove RequestAcquirePSMove;
  typedef Request_RequestReleasePSMove RequestReleasePSMove;
  typedef Request_RequestSetRumble RequestSetRumble;

  typedef Request_RequestType RequestType;
  static const RequestType GET_ACTIVE_PSMOVE_COUNT = Request_RequestType_GET_ACTIVE_PSMOVE_COUNT;
  static const RequestType ACQUIRE_PSMOVE = Request_RequestType_ACQUIRE_PSMOVE;
  static const RequestType RELEASE_PSMOVE = Request_RequestType_RELEASE_PSMOVE;
  static const RequestType SET_RUMBLE = Request_RequestType_SET_RUMBLE;
  static const RequestType CYCLE_TRACKING_COLOR = Request_RequestType_CYCLE_TRACKING_COLOR;
  static const RequestType RESET_POSE = Request_RequestType_RESET_POSE;
  static inline bool RequestType_IsValid(int value) {
    return Request_RequestType_IsValid(value);
  }
  static const RequestType RequestType_MIN =
    Request_RequestType_RequestType_MIN;
  static const RequestType RequestType_MAX =
    Request_RequestType_RequestType_MAX;
  static const int RequestType_ARRAYSIZE =
    Request_RequestType_RequestType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  RequestType_descriptor() {
    return Request_RequestType_descriptor();
  }
  static inline const ::std::string& RequestType_Name(RequestType value) {
    return Request_RequestType_Name(value);
  }
  static inline bool RequestType_Parse(const ::std::string& name,
      RequestType* value) {
    return Request_RequestType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional int32 request_id = 1;
  void clear_request_id();
  static const int kRequestIdFieldNumber = 1;
  ::google::protobuf::int32 request_id() const;
  void set_request_id(::google::protobuf::int32 value);

  // optional .PSMoveDataFrame.Request.RequestType type = 2;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  ::PSMoveDataFrame::Request_RequestType type() const;
  void set_type(::PSMoveDataFrame::Request_RequestType value);

  // optional .PSMoveDataFrame.Request.RequestAcquirePSMove request_acquire_psmove = 21;
  bool has_request_acquire_psmove() const;
  void clear_request_acquire_psmove();
  static const int kRequestAcquirePsmoveFieldNumber = 21;
  const ::PSMoveDataFrame::Request_RequestAcquirePSMove& request_acquire_psmove() const;
  ::PSMoveDataFrame::Request_RequestAcquirePSMove* mutable_request_acquire_psmove();
  ::PSMoveDataFrame::Request_RequestAcquirePSMove* release_request_acquire_psmove();
  void set_allocated_request_acquire_psmove(::PSMoveDataFrame::Request_RequestAcquirePSMove* request_acquire_psmove);

  // optional .PSMoveDataFrame.Request.RequestReleasePSMove request_release_psmove = 22;
  bool has_request_release_psmove() const;
  void clear_request_release_psmove();
  static const int kRequestReleasePsmoveFieldNumber = 22;
  const ::PSMoveDataFrame::Request_RequestReleasePSMove& request_release_psmove() const;
  ::PSMoveDataFrame::Request_RequestReleasePSMove* mutable_request_release_psmove();
  ::PSMoveDataFrame::Request_RequestReleasePSMove* release_request_release_psmove();
  void set_allocated_request_release_psmove(::PSMoveDataFrame::Request_RequestReleasePSMove* request_release_psmove);

  // optional .PSMoveDataFrame.Request.RequestSetRumble request_rumble = 23;
  bool has_request_rumble() const;
  void clear_request_rumble();
  static const int kRequestRumbleFieldNumber = 23;
  const ::PSMoveDataFrame::Request_RequestSetRumble& request_rumble() const;
  ::PSMoveDataFrame::Request_RequestSetRumble* mutable_request_rumble();
  ::PSMoveDataFrame::Request_RequestSetRumble* release_request_rumble();
  void set_allocated_request_rumble(::PSMoveDataFrame::Request_RequestSetRumble* request_rumble);

  // @@protoc_insertion_point(class_scope:PSMoveDataFrame.Request)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::int32 request_id_;
  int type_;
  ::PSMoveDataFrame::Request_RequestAcquirePSMove* request_acquire_psmove_;
  ::PSMoveDataFrame::Request_RequestReleasePSMove* request_release_psmove_;
  ::PSMoveDataFrame::Request_RequestSetRumble* request_rumble_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_PSMoveDataFrame_2eproto();
  friend void protobuf_AssignDesc_PSMoveDataFrame_2eproto();
  friend void protobuf_ShutdownFile_PSMoveDataFrame_2eproto();

  void InitAsDefaultInstance();
  static Request* default_instance_;
};
// -------------------------------------------------------------------

class Response_ResponseGeneral : public ::google::protobuf::Message {
 public:
  Response_ResponseGeneral();
  virtual ~Response_ResponseGeneral();

  Response_ResponseGeneral(const Response_ResponseGeneral& from);

  inline Response_ResponseGeneral& operator=(const Response_ResponseGeneral& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Response_ResponseGeneral& default_instance();

  void Swap(Response_ResponseGeneral* other);

  // implements Message ----------------------------------------------

  inline Response_ResponseGeneral* New() const { return New(NULL); }

  Response_ResponseGeneral* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Response_ResponseGeneral& from);
  void MergeFrom(const Response_ResponseGeneral& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Response_ResponseGeneral* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PSMoveDataFrame.Response.ResultCode code = 1;
  void clear_code();
  static const int kCodeFieldNumber = 1;
  ::PSMoveDataFrame::Response_ResultCode code() const;
  void set_code(::PSMoveDataFrame::Response_ResultCode value);

  // @@protoc_insertion_point(class_scope:PSMoveDataFrame.Response.ResponseGeneral)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  int code_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_PSMoveDataFrame_2eproto();
  friend void protobuf_AssignDesc_PSMoveDataFrame_2eproto();
  friend void protobuf_ShutdownFile_PSMoveDataFrame_2eproto();

  void InitAsDefaultInstance();
  static Response_ResponseGeneral* default_instance_;
};
// -------------------------------------------------------------------

class Response_ResponseActivePSMoveCount : public ::google::protobuf::Message {
 public:
  Response_ResponseActivePSMoveCount();
  virtual ~Response_ResponseActivePSMoveCount();

  Response_ResponseActivePSMoveCount(const Response_ResponseActivePSMoveCount& from);

  inline Response_ResponseActivePSMoveCount& operator=(const Response_ResponseActivePSMoveCount& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Response_ResponseActivePSMoveCount& default_instance();

  void Swap(Response_ResponseActivePSMoveCount* other);

  // implements Message ----------------------------------------------

  inline Response_ResponseActivePSMoveCount* New() const { return New(NULL); }

  Response_ResponseActivePSMoveCount* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Response_ResponseActivePSMoveCount& from);
  void MergeFrom(const Response_ResponseActivePSMoveCount& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Response_ResponseActivePSMoveCount* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 count = 1;
  void clear_count();
  static const int kCountFieldNumber = 1;
  ::google::protobuf::int32 count() const;
  void set_count(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PSMoveDataFrame.Response.ResponseActivePSMoveCount)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::int32 count_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_PSMoveDataFrame_2eproto();
  friend void protobuf_AssignDesc_PSMoveDataFrame_2eproto();
  friend void protobuf_ShutdownFile_PSMoveDataFrame_2eproto();

  void InitAsDefaultInstance();
  static Response_ResponseActivePSMoveCount* default_instance_;
};
// -------------------------------------------------------------------

class Response : public ::google::protobuf::Message {
 public:
  Response();
  virtual ~Response();

  Response(const Response& from);

  inline Response& operator=(const Response& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Response& default_instance();

  void Swap(Response* other);

  // implements Message ----------------------------------------------

  inline Response* New() const { return New(NULL); }

  Response* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Response& from);
  void MergeFrom(const Response& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Response* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Response_ResponseGeneral ResponseGeneral;
  typedef Response_ResponseActivePSMoveCount ResponseActivePSMoveCount;

  typedef Response_ResponseType ResponseType;
  static const ResponseType GENERAL_RESULT = Response_ResponseType_GENERAL_RESULT;
  static const ResponseType ACTIVE_PSMOVE_COUNT = Response_ResponseType_ACTIVE_PSMOVE_COUNT;
  static inline bool ResponseType_IsValid(int value) {
    return Response_ResponseType_IsValid(value);
  }
  static const ResponseType ResponseType_MIN =
    Response_ResponseType_ResponseType_MIN;
  static const ResponseType ResponseType_MAX =
    Response_ResponseType_ResponseType_MAX;
  static const int ResponseType_ARRAYSIZE =
    Response_ResponseType_ResponseType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ResponseType_descriptor() {
    return Response_ResponseType_descriptor();
  }
  static inline const ::std::string& ResponseType_Name(ResponseType value) {
    return Response_ResponseType_Name(value);
  }
  static inline bool ResponseType_Parse(const ::std::string& name,
      ResponseType* value) {
    return Response_ResponseType_Parse(name, value);
  }

  typedef Response_ResultCode ResultCode;
  static const ResultCode RESULT_OK = Response_ResultCode_RESULT_OK;
  static const ResultCode RESULT_ERROR = Response_ResultCode_RESULT_ERROR;
  static inline bool ResultCode_IsValid(int value) {
    return Response_ResultCode_IsValid(value);
  }
  static const ResultCode ResultCode_MIN =
    Response_ResultCode_ResultCode_MIN;
  static const ResultCode ResultCode_MAX =
    Response_ResultCode_ResultCode_MAX;
  static const int ResultCode_ARRAYSIZE =
    Response_ResultCode_ResultCode_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ResultCode_descriptor() {
    return Response_ResultCode_descriptor();
  }
  static inline const ::std::string& ResultCode_Name(ResultCode value) {
    return Response_ResultCode_Name(value);
  }
  static inline bool ResultCode_Parse(const ::std::string& name,
      ResultCode* value) {
    return Response_ResultCode_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .PSMoveDataFrame.Response.ResponseType type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::PSMoveDataFrame::Response_ResponseType type() const;
  void set_type(::PSMoveDataFrame::Response_ResponseType value);

  // optional int32 request_id = 2;
  void clear_request_id();
  static const int kRequestIdFieldNumber = 2;
  ::google::protobuf::int32 request_id() const;
  void set_request_id(::google::protobuf::int32 value);

  // optional .PSMoveDataFrame.Response.ResponseGeneral response_general = 21;
  bool has_response_general() const;
  void clear_response_general();
  static const int kResponseGeneralFieldNumber = 21;
  const ::PSMoveDataFrame::Response_ResponseGeneral& response_general() const;
  ::PSMoveDataFrame::Response_ResponseGeneral* mutable_response_general();
  ::PSMoveDataFrame::Response_ResponseGeneral* release_response_general();
  void set_allocated_response_general(::PSMoveDataFrame::Response_ResponseGeneral* response_general);

  // optional .PSMoveDataFrame.Response.ResponseActivePSMoveCount response_psmove_count = 22;
  bool has_response_psmove_count() const;
  void clear_response_psmove_count();
  static const int kResponsePsmoveCountFieldNumber = 22;
  const ::PSMoveDataFrame::Response_ResponseActivePSMoveCount& response_psmove_count() const;
  ::PSMoveDataFrame::Response_ResponseActivePSMoveCount* mutable_response_psmove_count();
  ::PSMoveDataFrame::Response_ResponseActivePSMoveCount* release_response_psmove_count();
  void set_allocated_response_psmove_count(::PSMoveDataFrame::Response_ResponseActivePSMoveCount* response_psmove_count);

  // @@protoc_insertion_point(class_scope:PSMoveDataFrame.Response)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  int type_;
  ::google::protobuf::int32 request_id_;
  ::PSMoveDataFrame::Response_ResponseGeneral* response_general_;
  ::PSMoveDataFrame::Response_ResponseActivePSMoveCount* response_psmove_count_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_PSMoveDataFrame_2eproto();
  friend void protobuf_AssignDesc_PSMoveDataFrame_2eproto();
  friend void protobuf_ShutdownFile_PSMoveDataFrame_2eproto();

  void InitAsDefaultInstance();
  static Response* default_instance_;
};
// -------------------------------------------------------------------

class ControllerDataFrame_Position : public ::google::protobuf::Message {
 public:
  ControllerDataFrame_Position();
  virtual ~ControllerDataFrame_Position();

  ControllerDataFrame_Position(const ControllerDataFrame_Position& from);

  inline ControllerDataFrame_Position& operator=(const ControllerDataFrame_Position& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ControllerDataFrame_Position& default_instance();

  void Swap(ControllerDataFrame_Position* other);

  // implements Message ----------------------------------------------

  inline ControllerDataFrame_Position* New() const { return New(NULL); }

  ControllerDataFrame_Position* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ControllerDataFrame_Position& from);
  void MergeFrom(const ControllerDataFrame_Position& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ControllerDataFrame_Position* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float x = 1;
  void clear_x();
  static const int kXFieldNumber = 1;
  float x() const;
  void set_x(float value);

  // optional float y = 2;
  void clear_y();
  static const int kYFieldNumber = 2;
  float y() const;
  void set_y(float value);

  // optional float z = 3;
  void clear_z();
  static const int kZFieldNumber = 3;
  float z() const;
  void set_z(float value);

  // @@protoc_insertion_point(class_scope:PSMoveDataFrame.ControllerDataFrame.Position)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  float x_;
  float y_;
  float z_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_PSMoveDataFrame_2eproto();
  friend void protobuf_AssignDesc_PSMoveDataFrame_2eproto();
  friend void protobuf_ShutdownFile_PSMoveDataFrame_2eproto();

  void InitAsDefaultInstance();
  static ControllerDataFrame_Position* default_instance_;
};
// -------------------------------------------------------------------

class ControllerDataFrame_Orientation : public ::google::protobuf::Message {
 public:
  ControllerDataFrame_Orientation();
  virtual ~ControllerDataFrame_Orientation();

  ControllerDataFrame_Orientation(const ControllerDataFrame_Orientation& from);

  inline ControllerDataFrame_Orientation& operator=(const ControllerDataFrame_Orientation& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ControllerDataFrame_Orientation& default_instance();

  void Swap(ControllerDataFrame_Orientation* other);

  // implements Message ----------------------------------------------

  inline ControllerDataFrame_Orientation* New() const { return New(NULL); }

  ControllerDataFrame_Orientation* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ControllerDataFrame_Orientation& from);
  void MergeFrom(const ControllerDataFrame_Orientation& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ControllerDataFrame_Orientation* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float x = 1;
  void clear_x();
  static const int kXFieldNumber = 1;
  float x() const;
  void set_x(float value);

  // optional float y = 2;
  void clear_y();
  static const int kYFieldNumber = 2;
  float y() const;
  void set_y(float value);

  // optional float z = 3;
  void clear_z();
  static const int kZFieldNumber = 3;
  float z() const;
  void set_z(float value);

  // optional float w = 4;
  void clear_w();
  static const int kWFieldNumber = 4;
  float w() const;
  void set_w(float value);

  // @@protoc_insertion_point(class_scope:PSMoveDataFrame.ControllerDataFrame.Orientation)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  float x_;
  float y_;
  float z_;
  float w_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_PSMoveDataFrame_2eproto();
  friend void protobuf_AssignDesc_PSMoveDataFrame_2eproto();
  friend void protobuf_ShutdownFile_PSMoveDataFrame_2eproto();

  void InitAsDefaultInstance();
  static ControllerDataFrame_Orientation* default_instance_;
};
// -------------------------------------------------------------------

class ControllerDataFrame : public ::google::protobuf::Message {
 public:
  ControllerDataFrame();
  virtual ~ControllerDataFrame();

  ControllerDataFrame(const ControllerDataFrame& from);

  inline ControllerDataFrame& operator=(const ControllerDataFrame& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ControllerDataFrame& default_instance();

  void Swap(ControllerDataFrame* other);

  // implements Message ----------------------------------------------

  inline ControllerDataFrame* New() const { return New(NULL); }

  ControllerDataFrame* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ControllerDataFrame& from);
  void MergeFrom(const ControllerDataFrame& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ControllerDataFrame* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ControllerDataFrame_Position Position;
  typedef ControllerDataFrame_Orientation Orientation;

  typedef ControllerDataFrame_ButtonType ButtonType;
  static const ButtonType TRIANGLE = ControllerDataFrame_ButtonType_TRIANGLE;
  static const ButtonType CIRCLE = ControllerDataFrame_ButtonType_CIRCLE;
  static const ButtonType CROSS = ControllerDataFrame_ButtonType_CROSS;
  static const ButtonType SQUARE = ControllerDataFrame_ButtonType_SQUARE;
  static const ButtonType SELECT = ControllerDataFrame_ButtonType_SELECT;
  static const ButtonType START = ControllerDataFrame_ButtonType_START;
  static const ButtonType PS = ControllerDataFrame_ButtonType_PS;
  static const ButtonType MOVE = ControllerDataFrame_ButtonType_MOVE;
  static const ButtonType TRIGGER = ControllerDataFrame_ButtonType_TRIGGER;
  static inline bool ButtonType_IsValid(int value) {
    return ControllerDataFrame_ButtonType_IsValid(value);
  }
  static const ButtonType ButtonType_MIN =
    ControllerDataFrame_ButtonType_ButtonType_MIN;
  static const ButtonType ButtonType_MAX =
    ControllerDataFrame_ButtonType_ButtonType_MAX;
  static const int ButtonType_ARRAYSIZE =
    ControllerDataFrame_ButtonType_ButtonType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ButtonType_descriptor() {
    return ControllerDataFrame_ButtonType_descriptor();
  }
  static inline const ::std::string& ButtonType_Name(ButtonType value) {
    return ControllerDataFrame_ButtonType_Name(value);
  }
  static inline bool ButtonType_Parse(const ::std::string& name,
      ButtonType* value) {
    return ControllerDataFrame_ButtonType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional int32 sequence_num = 1;
  void clear_sequence_num();
  static const int kSequenceNumFieldNumber = 1;
  ::google::protobuf::int32 sequence_num() const;
  void set_sequence_num(::google::protobuf::int32 value);

  // optional bool IsConnected = 2;
  void clear_isconnected();
  static const int kIsConnectedFieldNumber = 2;
  bool isconnected() const;
  void set_isconnected(bool value);

  // optional bool IsTrackingEnabled = 3;
  void clear_istrackingenabled();
  static const int kIsTrackingEnabledFieldNumber = 3;
  bool istrackingenabled() const;
  void set_istrackingenabled(bool value);

  // optional bool IsCurrentlyTracking = 4;
  void clear_iscurrentlytracking();
  static const int kIsCurrentlyTrackingFieldNumber = 4;
  bool iscurrentlytracking() const;
  void set_iscurrentlytracking(bool value);

  // optional .PSMoveDataFrame.ControllerDataFrame.Position position = 5;
  bool has_position() const;
  void clear_position();
  static const int kPositionFieldNumber = 5;
  const ::PSMoveDataFrame::ControllerDataFrame_Position& position() const;
  ::PSMoveDataFrame::ControllerDataFrame_Position* mutable_position();
  ::PSMoveDataFrame::ControllerDataFrame_Position* release_position();
  void set_allocated_position(::PSMoveDataFrame::ControllerDataFrame_Position* position);

  // optional .PSMoveDataFrame.ControllerDataFrame.Orientation orientation = 6;
  bool has_orientation() const;
  void clear_orientation();
  static const int kOrientationFieldNumber = 6;
  const ::PSMoveDataFrame::ControllerDataFrame_Orientation& orientation() const;
  ::PSMoveDataFrame::ControllerDataFrame_Orientation* mutable_orientation();
  ::PSMoveDataFrame::ControllerDataFrame_Orientation* release_orientation();
  void set_allocated_orientation(::PSMoveDataFrame::ControllerDataFrame_Orientation* orientation);

  // optional uint32 button_down_bitmask = 7;
  void clear_button_down_bitmask();
  static const int kButtonDownBitmaskFieldNumber = 7;
  ::google::protobuf::uint32 button_down_bitmask() const;
  void set_button_down_bitmask(::google::protobuf::uint32 value);

  // optional int32 trigger_value = 8;
  void clear_trigger_value();
  static const int kTriggerValueFieldNumber = 8;
  ::google::protobuf::int32 trigger_value() const;
  void set_trigger_value(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PSMoveDataFrame.ControllerDataFrame)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::int32 sequence_num_;
  bool isconnected_;
  bool istrackingenabled_;
  bool iscurrentlytracking_;
  ::PSMoveDataFrame::ControllerDataFrame_Position* position_;
  ::PSMoveDataFrame::ControllerDataFrame_Orientation* orientation_;
  ::google::protobuf::uint32 button_down_bitmask_;
  ::google::protobuf::int32 trigger_value_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_PSMoveDataFrame_2eproto();
  friend void protobuf_AssignDesc_PSMoveDataFrame_2eproto();
  friend void protobuf_ShutdownFile_PSMoveDataFrame_2eproto();

  void InitAsDefaultInstance();
  static ControllerDataFrame* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// Request_RequestAcquirePSMove

// optional int32 psmove_id = 1;
inline void Request_RequestAcquirePSMove::clear_psmove_id() {
  psmove_id_ = 0;
}
inline ::google::protobuf::int32 Request_RequestAcquirePSMove::psmove_id() const {
  // @@protoc_insertion_point(field_get:PSMoveDataFrame.Request.RequestAcquirePSMove.psmove_id)
  return psmove_id_;
}
inline void Request_RequestAcquirePSMove::set_psmove_id(::google::protobuf::int32 value) {
  
  psmove_id_ = value;
  // @@protoc_insertion_point(field_set:PSMoveDataFrame.Request.RequestAcquirePSMove.psmove_id)
}

// -------------------------------------------------------------------

// Request_RequestReleasePSMove

// optional int32 psmove_id = 1;
inline void Request_RequestReleasePSMove::clear_psmove_id() {
  psmove_id_ = 0;
}
inline ::google::protobuf::int32 Request_RequestReleasePSMove::psmove_id() const {
  // @@protoc_insertion_point(field_get:PSMoveDataFrame.Request.RequestReleasePSMove.psmove_id)
  return psmove_id_;
}
inline void Request_RequestReleasePSMove::set_psmove_id(::google::protobuf::int32 value) {
  
  psmove_id_ = value;
  // @@protoc_insertion_point(field_set:PSMoveDataFrame.Request.RequestReleasePSMove.psmove_id)
}

// -------------------------------------------------------------------

// Request_RequestSetRumble

// optional int32 psmove_id = 1;
inline void Request_RequestSetRumble::clear_psmove_id() {
  psmove_id_ = 0;
}
inline ::google::protobuf::int32 Request_RequestSetRumble::psmove_id() const {
  // @@protoc_insertion_point(field_get:PSMoveDataFrame.Request.RequestSetRumble.psmove_id)
  return psmove_id_;
}
inline void Request_RequestSetRumble::set_psmove_id(::google::protobuf::int32 value) {
  
  psmove_id_ = value;
  // @@protoc_insertion_point(field_set:PSMoveDataFrame.Request.RequestSetRumble.psmove_id)
}

// optional int32 rumble = 2;
inline void Request_RequestSetRumble::clear_rumble() {
  rumble_ = 0;
}
inline ::google::protobuf::int32 Request_RequestSetRumble::rumble() const {
  // @@protoc_insertion_point(field_get:PSMoveDataFrame.Request.RequestSetRumble.rumble)
  return rumble_;
}
inline void Request_RequestSetRumble::set_rumble(::google::protobuf::int32 value) {
  
  rumble_ = value;
  // @@protoc_insertion_point(field_set:PSMoveDataFrame.Request.RequestSetRumble.rumble)
}

// -------------------------------------------------------------------

// Request

// optional int32 request_id = 1;
inline void Request::clear_request_id() {
  request_id_ = 0;
}
inline ::google::protobuf::int32 Request::request_id() const {
  // @@protoc_insertion_point(field_get:PSMoveDataFrame.Request.request_id)
  return request_id_;
}
inline void Request::set_request_id(::google::protobuf::int32 value) {
  
  request_id_ = value;
  // @@protoc_insertion_point(field_set:PSMoveDataFrame.Request.request_id)
}

// optional .PSMoveDataFrame.Request.RequestType type = 2;
inline void Request::clear_type() {
  type_ = 0;
}
inline ::PSMoveDataFrame::Request_RequestType Request::type() const {
  // @@protoc_insertion_point(field_get:PSMoveDataFrame.Request.type)
  return static_cast< ::PSMoveDataFrame::Request_RequestType >(type_);
}
inline void Request::set_type(::PSMoveDataFrame::Request_RequestType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:PSMoveDataFrame.Request.type)
}

// optional .PSMoveDataFrame.Request.RequestAcquirePSMove request_acquire_psmove = 21;
inline bool Request::has_request_acquire_psmove() const {
  return !_is_default_instance_ && request_acquire_psmove_ != NULL;
}
inline void Request::clear_request_acquire_psmove() {
  if (GetArenaNoVirtual() == NULL && request_acquire_psmove_ != NULL) delete request_acquire_psmove_;
  request_acquire_psmove_ = NULL;
}
inline const ::PSMoveDataFrame::Request_RequestAcquirePSMove& Request::request_acquire_psmove() const {
  // @@protoc_insertion_point(field_get:PSMoveDataFrame.Request.request_acquire_psmove)
  return request_acquire_psmove_ != NULL ? *request_acquire_psmove_ : *default_instance_->request_acquire_psmove_;
}
inline ::PSMoveDataFrame::Request_RequestAcquirePSMove* Request::mutable_request_acquire_psmove() {
  
  if (request_acquire_psmove_ == NULL) {
    request_acquire_psmove_ = new ::PSMoveDataFrame::Request_RequestAcquirePSMove;
  }
  // @@protoc_insertion_point(field_mutable:PSMoveDataFrame.Request.request_acquire_psmove)
  return request_acquire_psmove_;
}
inline ::PSMoveDataFrame::Request_RequestAcquirePSMove* Request::release_request_acquire_psmove() {
  
  ::PSMoveDataFrame::Request_RequestAcquirePSMove* temp = request_acquire_psmove_;
  request_acquire_psmove_ = NULL;
  return temp;
}
inline void Request::set_allocated_request_acquire_psmove(::PSMoveDataFrame::Request_RequestAcquirePSMove* request_acquire_psmove) {
  delete request_acquire_psmove_;
  request_acquire_psmove_ = request_acquire_psmove;
  if (request_acquire_psmove) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:PSMoveDataFrame.Request.request_acquire_psmove)
}

// optional .PSMoveDataFrame.Request.RequestReleasePSMove request_release_psmove = 22;
inline bool Request::has_request_release_psmove() const {
  return !_is_default_instance_ && request_release_psmove_ != NULL;
}
inline void Request::clear_request_release_psmove() {
  if (GetArenaNoVirtual() == NULL && request_release_psmove_ != NULL) delete request_release_psmove_;
  request_release_psmove_ = NULL;
}
inline const ::PSMoveDataFrame::Request_RequestReleasePSMove& Request::request_release_psmove() const {
  // @@protoc_insertion_point(field_get:PSMoveDataFrame.Request.request_release_psmove)
  return request_release_psmove_ != NULL ? *request_release_psmove_ : *default_instance_->request_release_psmove_;
}
inline ::PSMoveDataFrame::Request_RequestReleasePSMove* Request::mutable_request_release_psmove() {
  
  if (request_release_psmove_ == NULL) {
    request_release_psmove_ = new ::PSMoveDataFrame::Request_RequestReleasePSMove;
  }
  // @@protoc_insertion_point(field_mutable:PSMoveDataFrame.Request.request_release_psmove)
  return request_release_psmove_;
}
inline ::PSMoveDataFrame::Request_RequestReleasePSMove* Request::release_request_release_psmove() {
  
  ::PSMoveDataFrame::Request_RequestReleasePSMove* temp = request_release_psmove_;
  request_release_psmove_ = NULL;
  return temp;
}
inline void Request::set_allocated_request_release_psmove(::PSMoveDataFrame::Request_RequestReleasePSMove* request_release_psmove) {
  delete request_release_psmove_;
  request_release_psmove_ = request_release_psmove;
  if (request_release_psmove) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:PSMoveDataFrame.Request.request_release_psmove)
}

// optional .PSMoveDataFrame.Request.RequestSetRumble request_rumble = 23;
inline bool Request::has_request_rumble() const {
  return !_is_default_instance_ && request_rumble_ != NULL;
}
inline void Request::clear_request_rumble() {
  if (GetArenaNoVirtual() == NULL && request_rumble_ != NULL) delete request_rumble_;
  request_rumble_ = NULL;
}
inline const ::PSMoveDataFrame::Request_RequestSetRumble& Request::request_rumble() const {
  // @@protoc_insertion_point(field_get:PSMoveDataFrame.Request.request_rumble)
  return request_rumble_ != NULL ? *request_rumble_ : *default_instance_->request_rumble_;
}
inline ::PSMoveDataFrame::Request_RequestSetRumble* Request::mutable_request_rumble() {
  
  if (request_rumble_ == NULL) {
    request_rumble_ = new ::PSMoveDataFrame::Request_RequestSetRumble;
  }
  // @@protoc_insertion_point(field_mutable:PSMoveDataFrame.Request.request_rumble)
  return request_rumble_;
}
inline ::PSMoveDataFrame::Request_RequestSetRumble* Request::release_request_rumble() {
  
  ::PSMoveDataFrame::Request_RequestSetRumble* temp = request_rumble_;
  request_rumble_ = NULL;
  return temp;
}
inline void Request::set_allocated_request_rumble(::PSMoveDataFrame::Request_RequestSetRumble* request_rumble) {
  delete request_rumble_;
  request_rumble_ = request_rumble;
  if (request_rumble) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:PSMoveDataFrame.Request.request_rumble)
}

// -------------------------------------------------------------------

// Response_ResponseGeneral

// optional .PSMoveDataFrame.Response.ResultCode code = 1;
inline void Response_ResponseGeneral::clear_code() {
  code_ = 0;
}
inline ::PSMoveDataFrame::Response_ResultCode Response_ResponseGeneral::code() const {
  // @@protoc_insertion_point(field_get:PSMoveDataFrame.Response.ResponseGeneral.code)
  return static_cast< ::PSMoveDataFrame::Response_ResultCode >(code_);
}
inline void Response_ResponseGeneral::set_code(::PSMoveDataFrame::Response_ResultCode value) {
  
  code_ = value;
  // @@protoc_insertion_point(field_set:PSMoveDataFrame.Response.ResponseGeneral.code)
}

// -------------------------------------------------------------------

// Response_ResponseActivePSMoveCount

// optional int32 count = 1;
inline void Response_ResponseActivePSMoveCount::clear_count() {
  count_ = 0;
}
inline ::google::protobuf::int32 Response_ResponseActivePSMoveCount::count() const {
  // @@protoc_insertion_point(field_get:PSMoveDataFrame.Response.ResponseActivePSMoveCount.count)
  return count_;
}
inline void Response_ResponseActivePSMoveCount::set_count(::google::protobuf::int32 value) {
  
  count_ = value;
  // @@protoc_insertion_point(field_set:PSMoveDataFrame.Response.ResponseActivePSMoveCount.count)
}

// -------------------------------------------------------------------

// Response

// optional .PSMoveDataFrame.Response.ResponseType type = 1;
inline void Response::clear_type() {
  type_ = 0;
}
inline ::PSMoveDataFrame::Response_ResponseType Response::type() const {
  // @@protoc_insertion_point(field_get:PSMoveDataFrame.Response.type)
  return static_cast< ::PSMoveDataFrame::Response_ResponseType >(type_);
}
inline void Response::set_type(::PSMoveDataFrame::Response_ResponseType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:PSMoveDataFrame.Response.type)
}

// optional int32 request_id = 2;
inline void Response::clear_request_id() {
  request_id_ = 0;
}
inline ::google::protobuf::int32 Response::request_id() const {
  // @@protoc_insertion_point(field_get:PSMoveDataFrame.Response.request_id)
  return request_id_;
}
inline void Response::set_request_id(::google::protobuf::int32 value) {
  
  request_id_ = value;
  // @@protoc_insertion_point(field_set:PSMoveDataFrame.Response.request_id)
}

// optional .PSMoveDataFrame.Response.ResponseGeneral response_general = 21;
inline bool Response::has_response_general() const {
  return !_is_default_instance_ && response_general_ != NULL;
}
inline void Response::clear_response_general() {
  if (GetArenaNoVirtual() == NULL && response_general_ != NULL) delete response_general_;
  response_general_ = NULL;
}
inline const ::PSMoveDataFrame::Response_ResponseGeneral& Response::response_general() const {
  // @@protoc_insertion_point(field_get:PSMoveDataFrame.Response.response_general)
  return response_general_ != NULL ? *response_general_ : *default_instance_->response_general_;
}
inline ::PSMoveDataFrame::Response_ResponseGeneral* Response::mutable_response_general() {
  
  if (response_general_ == NULL) {
    response_general_ = new ::PSMoveDataFrame::Response_ResponseGeneral;
  }
  // @@protoc_insertion_point(field_mutable:PSMoveDataFrame.Response.response_general)
  return response_general_;
}
inline ::PSMoveDataFrame::Response_ResponseGeneral* Response::release_response_general() {
  
  ::PSMoveDataFrame::Response_ResponseGeneral* temp = response_general_;
  response_general_ = NULL;
  return temp;
}
inline void Response::set_allocated_response_general(::PSMoveDataFrame::Response_ResponseGeneral* response_general) {
  delete response_general_;
  response_general_ = response_general;
  if (response_general) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:PSMoveDataFrame.Response.response_general)
}

// optional .PSMoveDataFrame.Response.ResponseActivePSMoveCount response_psmove_count = 22;
inline bool Response::has_response_psmove_count() const {
  return !_is_default_instance_ && response_psmove_count_ != NULL;
}
inline void Response::clear_response_psmove_count() {
  if (GetArenaNoVirtual() == NULL && response_psmove_count_ != NULL) delete response_psmove_count_;
  response_psmove_count_ = NULL;
}
inline const ::PSMoveDataFrame::Response_ResponseActivePSMoveCount& Response::response_psmove_count() const {
  // @@protoc_insertion_point(field_get:PSMoveDataFrame.Response.response_psmove_count)
  return response_psmove_count_ != NULL ? *response_psmove_count_ : *default_instance_->response_psmove_count_;
}
inline ::PSMoveDataFrame::Response_ResponseActivePSMoveCount* Response::mutable_response_psmove_count() {
  
  if (response_psmove_count_ == NULL) {
    response_psmove_count_ = new ::PSMoveDataFrame::Response_ResponseActivePSMoveCount;
  }
  // @@protoc_insertion_point(field_mutable:PSMoveDataFrame.Response.response_psmove_count)
  return response_psmove_count_;
}
inline ::PSMoveDataFrame::Response_ResponseActivePSMoveCount* Response::release_response_psmove_count() {
  
  ::PSMoveDataFrame::Response_ResponseActivePSMoveCount* temp = response_psmove_count_;
  response_psmove_count_ = NULL;
  return temp;
}
inline void Response::set_allocated_response_psmove_count(::PSMoveDataFrame::Response_ResponseActivePSMoveCount* response_psmove_count) {
  delete response_psmove_count_;
  response_psmove_count_ = response_psmove_count;
  if (response_psmove_count) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:PSMoveDataFrame.Response.response_psmove_count)
}

// -------------------------------------------------------------------

// ControllerDataFrame_Position

// optional float x = 1;
inline void ControllerDataFrame_Position::clear_x() {
  x_ = 0;
}
inline float ControllerDataFrame_Position::x() const {
  // @@protoc_insertion_point(field_get:PSMoveDataFrame.ControllerDataFrame.Position.x)
  return x_;
}
inline void ControllerDataFrame_Position::set_x(float value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:PSMoveDataFrame.ControllerDataFrame.Position.x)
}

// optional float y = 2;
inline void ControllerDataFrame_Position::clear_y() {
  y_ = 0;
}
inline float ControllerDataFrame_Position::y() const {
  // @@protoc_insertion_point(field_get:PSMoveDataFrame.ControllerDataFrame.Position.y)
  return y_;
}
inline void ControllerDataFrame_Position::set_y(float value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:PSMoveDataFrame.ControllerDataFrame.Position.y)
}

// optional float z = 3;
inline void ControllerDataFrame_Position::clear_z() {
  z_ = 0;
}
inline float ControllerDataFrame_Position::z() const {
  // @@protoc_insertion_point(field_get:PSMoveDataFrame.ControllerDataFrame.Position.z)
  return z_;
}
inline void ControllerDataFrame_Position::set_z(float value) {
  
  z_ = value;
  // @@protoc_insertion_point(field_set:PSMoveDataFrame.ControllerDataFrame.Position.z)
}

// -------------------------------------------------------------------

// ControllerDataFrame_Orientation

// optional float x = 1;
inline void ControllerDataFrame_Orientation::clear_x() {
  x_ = 0;
}
inline float ControllerDataFrame_Orientation::x() const {
  // @@protoc_insertion_point(field_get:PSMoveDataFrame.ControllerDataFrame.Orientation.x)
  return x_;
}
inline void ControllerDataFrame_Orientation::set_x(float value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:PSMoveDataFrame.ControllerDataFrame.Orientation.x)
}

// optional float y = 2;
inline void ControllerDataFrame_Orientation::clear_y() {
  y_ = 0;
}
inline float ControllerDataFrame_Orientation::y() const {
  // @@protoc_insertion_point(field_get:PSMoveDataFrame.ControllerDataFrame.Orientation.y)
  return y_;
}
inline void ControllerDataFrame_Orientation::set_y(float value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:PSMoveDataFrame.ControllerDataFrame.Orientation.y)
}

// optional float z = 3;
inline void ControllerDataFrame_Orientation::clear_z() {
  z_ = 0;
}
inline float ControllerDataFrame_Orientation::z() const {
  // @@protoc_insertion_point(field_get:PSMoveDataFrame.ControllerDataFrame.Orientation.z)
  return z_;
}
inline void ControllerDataFrame_Orientation::set_z(float value) {
  
  z_ = value;
  // @@protoc_insertion_point(field_set:PSMoveDataFrame.ControllerDataFrame.Orientation.z)
}

// optional float w = 4;
inline void ControllerDataFrame_Orientation::clear_w() {
  w_ = 0;
}
inline float ControllerDataFrame_Orientation::w() const {
  // @@protoc_insertion_point(field_get:PSMoveDataFrame.ControllerDataFrame.Orientation.w)
  return w_;
}
inline void ControllerDataFrame_Orientation::set_w(float value) {
  
  w_ = value;
  // @@protoc_insertion_point(field_set:PSMoveDataFrame.ControllerDataFrame.Orientation.w)
}

// -------------------------------------------------------------------

// ControllerDataFrame

// optional int32 sequence_num = 1;
inline void ControllerDataFrame::clear_sequence_num() {
  sequence_num_ = 0;
}
inline ::google::protobuf::int32 ControllerDataFrame::sequence_num() const {
  // @@protoc_insertion_point(field_get:PSMoveDataFrame.ControllerDataFrame.sequence_num)
  return sequence_num_;
}
inline void ControllerDataFrame::set_sequence_num(::google::protobuf::int32 value) {
  
  sequence_num_ = value;
  // @@protoc_insertion_point(field_set:PSMoveDataFrame.ControllerDataFrame.sequence_num)
}

// optional bool IsConnected = 2;
inline void ControllerDataFrame::clear_isconnected() {
  isconnected_ = false;
}
inline bool ControllerDataFrame::isconnected() const {
  // @@protoc_insertion_point(field_get:PSMoveDataFrame.ControllerDataFrame.IsConnected)
  return isconnected_;
}
inline void ControllerDataFrame::set_isconnected(bool value) {
  
  isconnected_ = value;
  // @@protoc_insertion_point(field_set:PSMoveDataFrame.ControllerDataFrame.IsConnected)
}

// optional bool IsTrackingEnabled = 3;
inline void ControllerDataFrame::clear_istrackingenabled() {
  istrackingenabled_ = false;
}
inline bool ControllerDataFrame::istrackingenabled() const {
  // @@protoc_insertion_point(field_get:PSMoveDataFrame.ControllerDataFrame.IsTrackingEnabled)
  return istrackingenabled_;
}
inline void ControllerDataFrame::set_istrackingenabled(bool value) {
  
  istrackingenabled_ = value;
  // @@protoc_insertion_point(field_set:PSMoveDataFrame.ControllerDataFrame.IsTrackingEnabled)
}

// optional bool IsCurrentlyTracking = 4;
inline void ControllerDataFrame::clear_iscurrentlytracking() {
  iscurrentlytracking_ = false;
}
inline bool ControllerDataFrame::iscurrentlytracking() const {
  // @@protoc_insertion_point(field_get:PSMoveDataFrame.ControllerDataFrame.IsCurrentlyTracking)
  return iscurrentlytracking_;
}
inline void ControllerDataFrame::set_iscurrentlytracking(bool value) {
  
  iscurrentlytracking_ = value;
  // @@protoc_insertion_point(field_set:PSMoveDataFrame.ControllerDataFrame.IsCurrentlyTracking)
}

// optional .PSMoveDataFrame.ControllerDataFrame.Position position = 5;
inline bool ControllerDataFrame::has_position() const {
  return !_is_default_instance_ && position_ != NULL;
}
inline void ControllerDataFrame::clear_position() {
  if (GetArenaNoVirtual() == NULL && position_ != NULL) delete position_;
  position_ = NULL;
}
inline const ::PSMoveDataFrame::ControllerDataFrame_Position& ControllerDataFrame::position() const {
  // @@protoc_insertion_point(field_get:PSMoveDataFrame.ControllerDataFrame.position)
  return position_ != NULL ? *position_ : *default_instance_->position_;
}
inline ::PSMoveDataFrame::ControllerDataFrame_Position* ControllerDataFrame::mutable_position() {
  
  if (position_ == NULL) {
    position_ = new ::PSMoveDataFrame::ControllerDataFrame_Position;
  }
  // @@protoc_insertion_point(field_mutable:PSMoveDataFrame.ControllerDataFrame.position)
  return position_;
}
inline ::PSMoveDataFrame::ControllerDataFrame_Position* ControllerDataFrame::release_position() {
  
  ::PSMoveDataFrame::ControllerDataFrame_Position* temp = position_;
  position_ = NULL;
  return temp;
}
inline void ControllerDataFrame::set_allocated_position(::PSMoveDataFrame::ControllerDataFrame_Position* position) {
  delete position_;
  position_ = position;
  if (position) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:PSMoveDataFrame.ControllerDataFrame.position)
}

// optional .PSMoveDataFrame.ControllerDataFrame.Orientation orientation = 6;
inline bool ControllerDataFrame::has_orientation() const {
  return !_is_default_instance_ && orientation_ != NULL;
}
inline void ControllerDataFrame::clear_orientation() {
  if (GetArenaNoVirtual() == NULL && orientation_ != NULL) delete orientation_;
  orientation_ = NULL;
}
inline const ::PSMoveDataFrame::ControllerDataFrame_Orientation& ControllerDataFrame::orientation() const {
  // @@protoc_insertion_point(field_get:PSMoveDataFrame.ControllerDataFrame.orientation)
  return orientation_ != NULL ? *orientation_ : *default_instance_->orientation_;
}
inline ::PSMoveDataFrame::ControllerDataFrame_Orientation* ControllerDataFrame::mutable_orientation() {
  
  if (orientation_ == NULL) {
    orientation_ = new ::PSMoveDataFrame::ControllerDataFrame_Orientation;
  }
  // @@protoc_insertion_point(field_mutable:PSMoveDataFrame.ControllerDataFrame.orientation)
  return orientation_;
}
inline ::PSMoveDataFrame::ControllerDataFrame_Orientation* ControllerDataFrame::release_orientation() {
  
  ::PSMoveDataFrame::ControllerDataFrame_Orientation* temp = orientation_;
  orientation_ = NULL;
  return temp;
}
inline void ControllerDataFrame::set_allocated_orientation(::PSMoveDataFrame::ControllerDataFrame_Orientation* orientation) {
  delete orientation_;
  orientation_ = orientation;
  if (orientation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:PSMoveDataFrame.ControllerDataFrame.orientation)
}

// optional uint32 button_down_bitmask = 7;
inline void ControllerDataFrame::clear_button_down_bitmask() {
  button_down_bitmask_ = 0u;
}
inline ::google::protobuf::uint32 ControllerDataFrame::button_down_bitmask() const {
  // @@protoc_insertion_point(field_get:PSMoveDataFrame.ControllerDataFrame.button_down_bitmask)
  return button_down_bitmask_;
}
inline void ControllerDataFrame::set_button_down_bitmask(::google::protobuf::uint32 value) {
  
  button_down_bitmask_ = value;
  // @@protoc_insertion_point(field_set:PSMoveDataFrame.ControllerDataFrame.button_down_bitmask)
}

// optional int32 trigger_value = 8;
inline void ControllerDataFrame::clear_trigger_value() {
  trigger_value_ = 0;
}
inline ::google::protobuf::int32 ControllerDataFrame::trigger_value() const {
  // @@protoc_insertion_point(field_get:PSMoveDataFrame.ControllerDataFrame.trigger_value)
  return trigger_value_;
}
inline void ControllerDataFrame::set_trigger_value(::google::protobuf::int32 value) {
  
  trigger_value_ = value;
  // @@protoc_insertion_point(field_set:PSMoveDataFrame.ControllerDataFrame.trigger_value)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace PSMoveDataFrame

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::PSMoveDataFrame::Request_RequestType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::PSMoveDataFrame::Request_RequestType>() {
  return ::PSMoveDataFrame::Request_RequestType_descriptor();
}
template <> struct is_proto_enum< ::PSMoveDataFrame::Response_ResponseType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::PSMoveDataFrame::Response_ResponseType>() {
  return ::PSMoveDataFrame::Response_ResponseType_descriptor();
}
template <> struct is_proto_enum< ::PSMoveDataFrame::Response_ResultCode> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::PSMoveDataFrame::Response_ResultCode>() {
  return ::PSMoveDataFrame::Response_ResultCode_descriptor();
}
template <> struct is_proto_enum< ::PSMoveDataFrame::ControllerDataFrame_ButtonType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::PSMoveDataFrame::ControllerDataFrame_ButtonType>() {
  return ::PSMoveDataFrame::ControllerDataFrame_ButtonType_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_PSMoveDataFrame_2eproto__INCLUDED
